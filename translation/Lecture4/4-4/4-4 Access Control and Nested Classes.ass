[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 4-4 Access Control and Nested Classes.mp4
Video File: 4-4 Access Control and Nested Classes.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Active Line: 352

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 备注 - 侧边,微软雅黑,46,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,0,7,36,23,32,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 片头 - 集数,微软雅黑,116,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 绿色,微软雅黑,40,&H00FCFCFC,&H000000FF,&H00275F34,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 绿色 - 背景,微软雅黑,66,&H00275F34,&H000000FF,&H00275F34,&H004848C5,0,0,0,0,100,125,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 红色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00614B86,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 红色 - 背景,微软雅黑,45,&H00614B86,&H00614B86,&H00614B86,&H004848C5,-1,0,0,0,103,110,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 左下蓝色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00584408,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 左下蓝色 - 背景,微软雅黑,70,&H00584408,&H00614B86,&H00584408,&H004848C5,0,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 中间浅蓝,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00C98E36,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 中间浅蓝 - 背景,微软雅黑,40,&H00D9C2A5,&H00614B86,&H00D9C2A5,&H004848C5,0,0,0,0,118,117,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 右上 - 深绿,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00566B0A,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 右上 - 深绿 - 背景,微软雅黑,50,&H00566B0A,&H00614B86,&H00566B0A,&H004848C5,0,0,0,0,100,172,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 右下深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H000E0645,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 右下深红 - 背景,微软雅黑,40,&H000E0645,&H00614B86,&H000E0645,&H004848C5,0,0,0,0,106,148,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左上亮红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00484BF1,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左上亮红 - 背景,微软雅黑,40,&H00484BF1,&H00614B86,&H00484BF1,&H004848C5,0,0,0,0,120,120,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左下灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H002E2A28,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左下灰色 - 背景,微软雅黑,40,&H002E2A28,&H00614B86,&H002E2A28,&H004848C5,0,0,0,0,111,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 中下深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00050D55,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 中下深红 - 背景,微软雅黑,40,&H00050D55,&H00614B86,&H00050D55,&H004848C5,0,0,0,0,100,108,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右上橙色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H000575E0,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右上橙色 - 背景,微软雅黑,40,&H000575E0,&H00614B86,&H000575E0,&H004848C5,0,0,0,0,120,140,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右下灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00B3B3B3,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右下灰色 - 背景,微软雅黑,40,&H00B3B3B3,&H00614B86,&H00B3B3B3,&H004848C5,0,0,0,0,140,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左上蓝色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00AD7141,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左上蓝色 - Copy,微软雅黑,40,&H00AD7141,&H00614B86,&H00AD7141,&H004848C5,0,0,0,0,150,120,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左中深色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H002D2B2B,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左中深色 - Copy,微软雅黑,40,&H002D2B2B,&H00614B86,&H002D2B2B,&H004848C5,0,0,0,0,100,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右上深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00000563,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右上深红 - Copy,微软雅黑,40,&H00000563,&H00614B86,&H00000563,&H004848C5,0,0,0,0,105,119,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右下橙色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H001065BC,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右下橙色 - Copy,微软雅黑,40,&H00377DC1,&H00614B86,&H00377DC1,&H004848C5,0,0,0,0,120,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右中灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00273D54,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右中灰色 - Copy,微软雅黑,40,&H00273D54,&H00614B86,&H00273D54,&H004848C5,0,0,0,0,104,109,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左 - 下,微软雅黑,40,&H00FCFCFC,&H00614B86,&H001F2BA0,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左 - 下 - Copy,微软雅黑,40,&H001F2BA0,&H00614B86,&H001F2BA0,&H004848C5,0,0,0,0,112,114,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左 - 上,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00FCCB58,&H004848C5,-1,0,0,0,100,100,1,0,1,0,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左 - 上 - 背景,微软雅黑,75,&H00FCCB58,&H00614B86,&H00FCCB58,&H004848C5,0,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H002E3E1C,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 中 - 背景,微软雅黑,40,&H002E3E1C,&H00614B86,&H002E3E1C,&H004848C5,-1,0,0,0,120,188,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H009A32EF,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左中 - 背景,微软雅黑,40,&H009A32EF,&H00614B86,&H009A32EF,&H004848C5,-1,0,0,0,120,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左下,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00846D08,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左下 - 背景,微软雅黑,45,&H00846D08,&H00614B86,&H00846D08,&H004848C5,-1,0,0,0,100,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00067EB6,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右中 - Copy,微软雅黑,80,&H00067EB6,&H00614B86,&H00067EB6,&H004848C5,-1,0,0,0,165,114,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右下,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00965F09,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右下 - Copy,微软雅黑,80,&H00965F09,&H00614B86,&H00965F09,&H004848C5,-1,0,0,0,195,114,1,0,3,3,0,2,3,3,14,1
Style: 备注 - 中间,微软雅黑,46,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,8,36,23,32,1
Style: 备注 - 主题,微软雅黑,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,1,7,36,23,158,1
Style: 这一集的名字,微软雅黑,68,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,36,43,40,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:00.81,0:00:02.58,en - 白色,,0,0,0,,Using an SLList is pretty simple.
Dialogue: 0,0:00:00.81,0:00:02.58,zh - 黄色,,0,0,0,,SLList 非常易用
Dialogue: 0,0:00:02.58,0:00:05.48,en - 白色,,0,0,0,,You want to add or remove stuff, get stuff, whatever,
Dialogue: 0,0:00:02.58,0:00:05.48,zh - 黄色,,0,0,0,,你可以添加、删除、获取其中的值
Dialogue: 0,0:00:05.62,0:00:08.71,en - 白色,,0,0,0,,you should use the methods that are provided by the class.
Dialogue: 0,0:00:05.62,0:00:08.71,zh - 黄色,,0,0,0,,你应该使用类提供的方法
Dialogue: 0,0:00:09.13,0:00:11.77,en - 白色,,0,0,0,,However, technically, the way Java syntax works,
Dialogue: 0,0:00:09.13,0:00:11.77,zh - 黄色,,0,0,0,,然而，就 Java 语法来讲
Dialogue: 0,0:00:12.00,0:00:13.44,en - 白色,,0,0,0,,you can try and do weird stuff.
Dialogue: 0,0:00:12.00,0:00:13.44,zh - 黄色,,0,0,0,,你可以试着做些奇怪的事情
Dialogue: 0,0:00:14.05,0:00:18.88,en - 白色,,0,0,0,,So for example, I can reach directly inside of the object and I could say, hey, you know what?
Dialogue: 0,0:00:14.05,0:00:18.88,zh - 黄色,,0,0,0,,比如直接访问对象内部
Dialogue: 0,0:00:19.26,0:00:21.39,en - 白色,,0,0,0,,L, I'm not going to use your method.
Dialogue: 0,0:00:19.26,0:00:21.39,zh - 黄色,,0,0,0,,我不会使用 L 的方法
Dialogue: 0,0:00:21.39,0:00:25.40,en - 白色,,0,0,0,,Instead, I'm going to say, take first.next.next
Dialogue: 0,0:00:21.39,0:00:25.40,zh - 黄色,,0,0,0,,而是调用 first.next.next
Dialogue: 0,0:00:25.40,0:00:27.24,en - 白色,,0,0,0,,and set it equal to L.first.next,
Dialogue: 0,0:00:25.40,0:00:27.24,zh - 黄色,,0,0,0,,并将其设置为 L
Dialogue: 0,0:00:27.51,0:00:34.08,en - 白色,,0,0,0,,and that can basically do bizarre things to my data structures that are not intended or allowed by the methods provided.
Dialogue: 0,0:00:27.51,0:00:34.08,zh - 黄色,,0,0,0,,这些对数据结构所做的奇怪的事情，都不是类的方法提供或者允许的
Dialogue: 0,0:00:34.61,0:00:37.53,en - 白色,,0,0,0,,You might consider pausing and guessing what's going to happen in this picture.
Dialogue: 0,0:00:34.61,0:00:37.53,zh - 黄色,,0,0,0,,暂停一下，猜猜这张图片里会发生什么
Dialogue: 0,0:00:38.61,0:00:40.51,en - 白色,,0,0,0,,So what happens is this right here.
Dialogue: 0,0:00:38.61,0:00:40.51,zh - 黄色,,0,0,0,,会变成这样
Dialogue: 0,0:00:40.88,0:00:44.11,en - 白色,,0,0,0,,It ends up pointing back at itself and we ruin the list.
Dialogue: 0,0:00:40.88,0:00:44.11,zh - 黄色,,0,0,0,,它最终指向自己，这个 List 就毁了
Dialogue: 0,0:00:44.56,0:00:47.62,en - 白色,,0,0,0,,This is not something that an IntList or an IntList-like object should do.
Dialogue: 0,0:00:44.56,0:00:47.62,zh - 黄色,,0,0,0,,这不是 IntList 或类似 IntList 的对象应该做的事情
Dialogue: 0,0:00:47.62,0:00:48.68,en - 白色,,0,0,0,,It shouldn't have an infinite loop.
Dialogue: 0,0:00:47.62,0:00:48.68,zh - 黄色,,0,0,0,,它不应该有无限循环
Dialogue: 0,0:00:49.08,0:00:51.37,en - 白色,,0,0,0,,I guess this would be the list that's like the number 10
Dialogue: 0,0:00:49.08,0:00:51.37,zh - 黄色,,0,0,0,,List 的这个节点是10
Dialogue: 0,0:00:51.79,0:00:53.37,en - 白色,,0,0,0,,and then an infinite number of 15s.
Dialogue: 0,0:00:51.79,0:00:53.37,zh - 黄色,,0,0,0,,然后是无数个15
Dialogue: 0,0:00:53.37,0:00:57.37,en - 白色,,0,0,0,,And that's not something we really intended to support with the methods provided.
Dialogue: 0,0:00:53.37,0:00:57.37,zh - 黄色,,0,0,0,,我们并不打算提供方法来支持这一点
Dialogue: 0,0:00:58.56,0:01:01.65,en - 白色,,0,0,0,,So we could leave a little note somewhere in the file.
Dialogue: 0,0:00:58.56,0:01:01.65,zh - 黄色,,0,0,0,,我们可以在文件的某个地方留个小纸条
Dialogue: 0,0:01:01.65,0:01:04.93,en - 白色,,0,0,0,,We could in comments do something like,
Dialogue: 0,0:01:01.65,0:01:04.93,zh - 黄色,,0,0,0,,可以做一些这样的注释
Dialogue: 0,0:01:05.64,0:01:06.95,en - 白色,,0,0,0,,it is incredibly important--
Dialogue: 0,0:01:05.64,0:01:06.95,zh - 黄色,,0,0,0,,这是非常重要的...
Dialogue: 0,0:01:08.72,0:01:09.49,en - 白色,,0,0,0,,up here.
Dialogue: 0,0:01:08.72,0:01:09.49,zh - 黄色,,0,0,0,,在这上面
Dialogue: 0,0:01:12.95,0:01:15.53,en - 白色,,0,0,0,,Note, please do not mess with first.
Dialogue: 0,0:01:12.95,0:01:15.53,zh - 黄色,,0,0,0,,注意，请不要先弄乱 first
Dialogue: 0,0:01:16.57,0:01:17.88,en - 白色,,0,0,0,,We could do something like that
Dialogue: 0,0:01:16.57,0:01:17.88,zh - 黄色,,0,0,0,,我们可以这样做
Dialogue: 0,0:01:18.11,0:01:19.97,en - 白色,,0,0,0,,and hope that other programs will look at it,
Dialogue: 0,0:01:18.11,0:01:19.97,zh - 黄色,,0,0,0,,并希望其他程序也会关注它
Dialogue: 0,0:01:20.50,0:01:23.08,en - 白色,,0,0,0,,but other programmers will probably not.
Dialogue: 0,0:01:20.50,0:01:23.08,zh - 黄色,,0,0,0,,但其他程序员可能不会在意
Dialogue: 0,0:01:23.08,0:01:25.62,en - 白色,,0,0,0,,And so, instead, Java provides us with a feature
Dialogue: 0,0:01:23.08,0:01:25.62,zh - 黄色,,0,0,0,,所以 Java 为我们提供了一个特性
Dialogue: 0,0:01:25.71,0:01:30.28,en - 白色,,0,0,0,,where, instead of declaring a member of a class public, we can instead say private.
Dialogue: 0,0:01:25.71,0:01:30.28,zh - 黄色,,0,0,0,,对于 public 的成员变量，我们可以将它私有化
Dialogue: 0,0:01:31.07,0:01:33.75,en - 白色,,0,0,0,,So I'll just go in here, and I'll say private here.
Dialogue: 0,0:01:31.07,0:01:33.75,zh - 黄色,,0,0,0,,将这里改为 private
Dialogue: 0,0:01:35.35,0:01:37.44,en - 白色,,0,0,0,,And that does what I want to accomplish.
Dialogue: 0,0:01:35.35,0:01:37.44,zh - 黄色,,0,0,0,,这就是我想要实现的
Dialogue: 0,0:01:38.08,0:01:40.90,en - 白色,,0,0,0,,Now, the nice thing is, not only is this self-documenting,
Dialogue: 0,0:01:38.08,0:01:40.90,zh - 黄色,,0,0,0,,这样不仅仅是自我记录
Dialogue: 0,0:01:40.90,0:01:43.00,en - 白色,,0,0,0,,but it's also enforced by the compiler.
Dialogue: 0,0:01:40.90,0:01:43.00,zh - 黄色,,0,0,0,,编译器也强制执行
Dialogue: 0,0:01:43.57,0:01:46.66,en - 白色,,0,0,0,,If I make this private and then in another class
Dialogue: 0,0:01:43.57,0:01:46.66,zh - 黄色,,0,0,0,,如果把它设为 private， 然后在另一个类中
Dialogue: 0,0:01:46.66,0:01:50.17,en - 白色,,0,0,0,,I do something like L.first.next.next equals L.first.next,
Dialogue: 0,0:01:46.66,0:01:50.17,zh - 黄色,,0,0,0,,做 L.first.next.next = L.first.next 这样的事
Dialogue: 0,0:01:50.51,0:01:52.42,en - 白色,,0,0,0,,when I try and compile that file,
Dialogue: 0,0:01:50.51,0:01:52.42,zh - 黄色,,0,0,0,,编译文件时
Dialogue: 0,0:01:52.42,0:01:54.66,en - 白色,,0,0,0,,I get back that first have private access.
Dialogue: 0,0:01:52.42,0:01:54.66,zh - 黄色,,0,0,0,,会报错“first 私有访问”
Dialogue: 0,0:01:55.02,0:01:58.60,en - 白色,,0,0,0,,So what the private keyword does is it prevents code in other classes
Dialogue: 0,0:01:55.02,0:01:58.60,zh - 黄色,,0,0,0,,private 关键字的作用是防止其它类中的代码
Dialogue: 0,0:01:58.64,0:02:03.04,en - 白色,,0,0,0,,from using members-- that is, variables, methods, or constructors--
Dialogue: 0,0:01:58.64,0:02:03.04,zh - 黄色,,0,0,0,,使用本类中的成员，也就是变量、方法或构造函数等
Dialogue: 0,0:02:03.97,0:02:08.26,en - 白色,,0,0,0,,what private does is it says you cannot use those from outside the SLList class.
Dialogue: 0,0:02:03.97,0:02:08.26,zh - 黄色,,0,0,0,,private 告诉你不能从 SLList 类外部使用它们
Dialogue: 0,0:02:09.13,0:02:12.68,en - 白色,,0,0,0,,Now, if I had a main method down here in SLList that did funny things like that
Dialogue: 0,0:02:09.13,0:02:12.68,zh - 黄色,,0,0,0,,如果 SLList 内部有一个 main 方法
Dialogue: 0,0:02:12.75,0:02:15.31,en - 白色,,0,0,0,,it would work fine because it's part of the SLList class,
Dialogue: 0,0:02:12.75,0:02:15.31,zh - 黄色,,0,0,0,,它会正常工作，因为它是 SLList 类的一部分
Dialogue: 0,0:02:15.55,0:02:18.85,en - 白色,,0,0,0,,but anybody outside-- anybody not editing SLList.java--
Dialogue: 0,0:02:15.55,0:02:18.85,zh - 黄色,,0,0,0,,但是在 SLList.java 以外
Dialogue: 0,0:02:18.85,0:02:20.33,en - 白色,,0,0,0,,could not access first.
Dialogue: 0,0:02:18.85,0:02:20.33,zh - 黄色,,0,0,0,,无法访问 first
Dialogue: 0,0:02:21.07,0:02:22.84,en - 白色,,0,0,0,,Now, that's not 100% true.
Dialogue: 0,0:02:21.07,0:02:22.84,zh - 黄色,,0,0,0,,这并不完全正确
Dialogue: 0,0:02:22.84,0:02:27.51,en - 白色,,0,0,0,,There is a funny feature in Java known as reflection which allows you to bypass these modifiers,
Dialogue: 0,0:02:22.84,0:02:27.51,zh - 黄色,,0,0,0,,Java 中有一个称为反射的特性，允许绕过这些修饰符
Dialogue: 0,0:02:27.77,0:02:29.88,en - 白色,,0,0,0,,but you rarely, rarely use it.
Dialogue: 0,0:02:27.77,0:02:29.88,zh - 黄色,,0,0,0,,但是这非常非常少用
Dialogue: 0,0:02:30.43,0:02:34.42,en - 白色,,0,0,0,,And what this does it says, if you're a casual programmer,
Dialogue: 0,0:02:30.43,0:02:34.42,zh - 黄色,,0,0,0,,private 是说，如果你是个散漫的程序员
Dialogue: 0,0:02:34.62,0:02:36.13,en - 白色,,0,0,0,,this is something you shouldn't mess with
Dialogue: 0,0:02:34.62,0:02:36.13,zh - 黄色,,0,0,0,,你不应该弄乱这些东西
Dialogue: 0,0:02:36.13,0:02:38.46,en - 白色,,0,0,0,,and the compiler will stop you from doing it.
Dialogue: 0,0:02:36.13,0:02:38.46,zh - 黄色,,0,0,0,,编译器会阻止你弄乱
Dialogue: 0,0:02:39.36,0:02:40.33,en - 白色,,0,0,0,,So why do we do that?
Dialogue: 0,0:02:39.36,0:02:40.33,zh - 黄色,,0,0,0,,为什么要这么做呢？
Dialogue: 0,0:02:40.33,0:02:45.53,en - 白色,,0,0,0,,What's the point of restricting access other than the implicit picture I've presented so far?
Dialogue: 0,0:02:40.33,0:02:45.53,zh - 黄色,,0,0,0,,除了到目前为止所展示的隐式图景之外，限制访问还有什么意义呢？
Dialogue: 0,0:02:46.21,0:02:50.02,en - 白色,,0,0,0,,Well, the basic idea if I wanted to summarize really the heart of private
Dialogue: 0,0:02:46.21,0:02:50.02,zh - 黄色,,0,0,0,,我来总结一下 private 的核心思想
Dialogue: 0,0:02:50.26,0:02:53.78,en - 白色,,0,0,0,,is to hide implementation details from the users of your class.
Dialogue: 0,0:02:50.26,0:02:53.78,zh - 黄色,,0,0,0,,用来对用户隐藏类的实现细节
Dialogue: 0,0:02:53.78,0:02:56.28,en - 白色,,0,0,0,,The user doesn't need to know that we have a first variable.
Dialogue: 0,0:02:53.78,0:02:56.28,zh - 黄色,,0,0,0,,用户不需要知道我们有 first 变量
Dialogue: 0,0:02:56.28,0:02:57.67,en - 白色,,0,0,0,,They shouldn't be messing with it.
Dialogue: 0,0:02:56.28,0:02:57.67,zh - 黄色,,0,0,0,,他们不应该弄乱它
Dialogue: 0,0:02:57.67,0:03:02.62,en - 白色,,0,0,0,,So by making it private, it's a detail that we the programmer of SLList need but the user does not.
Dialogue: 0,0:02:57.67,0:03:02.62,zh - 黄色,,0,0,0,,将它设为 private，这是我们 SLList 程序员需要的细节，其他用户不需要
Dialogue: 0,0:03:03.34,0:03:05.80,en - 白色,,0,0,0,,So that's something that's less for the user to understand.
Dialogue: 0,0:03:03.34,0:03:05.80,zh - 黄色,,0,0,0,,用户不需要知道那么多
Dialogue: 0,0:03:05.80,0:03:07.95,en - 白色,,0,0,0,,They don't have to know anything about what's going on under the hood.
Dialogue: 0,0:03:05.80,0:03:07.95,zh - 黄色,,0,0,0,,不需要知道引擎下面发生了什么
Dialogue: 0,0:03:08.26,0:03:11.20,en - 白色,,0,0,0,,And they could think of the SLList class as just a magical black box.
Dialogue: 0,0:03:08.26,0:03:11.20,zh - 黄色,,0,0,0,,他们可以把 SLList 类看作一个神奇的黑匣子
Dialogue: 0,0:03:11.20,0:03:13.93,en - 白色,,0,0,0,,They don't have to know about the naked recursive data structure inside.
Dialogue: 0,0:03:11.20,0:03:13.93,zh - 黄色,,0,0,0,,不需要知道内部裸露的递归数据结构
Dialogue: 0,0:03:14.65,0:03:21.35,en - 白色,,0,0,0,,Likewise, you're welcome to change any private method or private constructor or private variable that you want.
Dialogue: 0,0:03:14.65,0:03:21.35,zh - 黄色,,0,0,0,,同样你也可以根据需要更改任何私有方法、私有构造函数或私有变量
Dialogue: 0,0:03:21.84,0:03:23.86,en - 白色,,0,0,0,,It's your own personal implementation.
Dialogue: 0,0:03:21.84,0:03:23.86,zh - 黄色,,0,0,0,,这是你自己的实现
Dialogue: 0,0:03:24.05,0:03:27.06,en - 白色,,0,0,0,,So if it's marked private, it's not something else someone is going to rely on.
Dialogue: 0,0:03:24.05,0:03:27.06,zh - 黄色,,0,0,0,,如果被标记为 private，它就不是其他人要依赖的东西
Dialogue: 0,0:03:28.15,0:03:31.75,en - 白色,,0,0,0,,So as an analogy, in a car, we have some public parts.
Dialogue: 0,0:03:28.15,0:03:31.75,zh - 黄色,,0,0,0,,打个比方，我们在车里有一些公共部件
Dialogue: 0,0:03:31.75,0:03:33.33,en - 白色,,0,0,0,,We have the pedals in the steering wheel.
Dialogue: 0,0:03:31.75,0:03:33.33,zh - 黄色,,0,0,0,,方向盘、踏板...
Dialogue: 0,0:03:33.61,0:03:36.78,en - 白色,,0,0,0,,We have the idea that there is an accelerator pedal and a brake pedal.
Dialogue: 0,0:03:33.61,0:03:36.78,zh - 黄色,,0,0,0,,有一个油门踏板和一个刹车踏板
Dialogue: 0,0:03:36.78,0:03:37.77,en - 白色,,0,0,0,,One should speed me up.
Dialogue: 0,0:03:36.78,0:03:37.77,zh - 黄色,,0,0,0,,一个用来加速
Dialogue: 0,0:03:37.77,0:03:38.77,en - 白色,,0,0,0,,One should slow me down.
Dialogue: 0,0:03:37.77,0:03:38.77,zh - 黄色,,0,0,0,,一个用来减速
Dialogue: 0,0:03:38.77,0:03:40.60,en - 白色,,0,0,0,,The steering wheel, when I turn it that way,
Dialogue: 0,0:03:38.77,0:03:40.60,zh - 黄色,,0,0,0,,当我这样转动方向盘时
Dialogue: 0,0:03:40.60,0:03:41.93,en - 白色,,0,0,0,,I should be turning that direction.
Dialogue: 0,0:03:40.60,0:03:41.93,zh - 黄色,,0,0,0,,应该转向这个方向
Dialogue: 0,0:03:42.88,0:03:45.37,en - 白色,,0,0,0,,And then there's a bunch of private details to the car.
Dialogue: 0,0:03:42.88,0:03:45.37,zh - 黄色,,0,0,0,,这辆车还有一堆私密的细节
Dialogue: 0,0:03:45.76,0:03:48.86,en - 白色,,0,0,0,,So you may have a fuel line that
Dialogue: 0,0:03:45.76,0:03:48.86,zh - 黄色,,0,0,0,,可能有一条燃料管
Dialogue: 0,0:03:49.42,0:03:53.98,en - 白色,,0,0,0,,is able to carry liquid fuel from one part of the car to the other, but some cars don't have that.
Dialogue: 0,0:03:49.42,0:03:53.98,zh - 黄色,,0,0,0,,能够将液体燃料从车的一个部分运送到另一个部分，但有些车没有
Dialogue: 0,0:03:53.98,0:03:55.42,en - 白色,,0,0,0,,There is no notion of fuel.
Dialogue: 0,0:03:53.98,0:03:55.42,zh - 黄色,,0,0,0,,有些没有燃料的概念
Dialogue: 0,0:03:55.42,0:03:57.84,en - 白色,,0,0,0,,You just have a battery and electric motor.
Dialogue: 0,0:03:55.42,0:03:57.84,zh - 黄色,,0,0,0,,只有电池和电动马达
Dialogue: 0,0:03:58.00,0:04:02.32,en - 白色,,0,0,0,,So those are private details you can manipulate however you want because the user does not think about them.
Dialogue: 0,0:03:58.00,0:04:02.32,zh - 黄色,,0,0,0,,你可以随意操作这些私人细节，因为用户不会考虑它们
Dialogue: 0,0:04:02.32,0:04:05.26,en - 白色,,0,0,0,,They don't think, oh, I need to worry about fuel injection.
Dialogue: 0,0:04:02.32,0:04:05.26,zh - 黄色,,0,0,0,,他们不会想：“我需要担心燃油喷射”
Dialogue: 0,0:04:05.26,0:04:06.71,en - 白色,,0,0,0,,It's not on their menu.
Dialogue: 0,0:04:05.26,0:04:06.71,zh - 黄色,,0,0,0,,不在他们考虑范围内
Dialogue: 0,0:04:07.63,0:04:09.70,en - 白色,,0,0,0,,Now, despite the term access control--
Dialogue: 0,0:04:07.63,0:04:09.70,zh - 黄色,,0,0,0,,尽管有“访问控制”这个词
Dialogue: 0,0:04:09.70,0:04:14.41,en - 白色,,0,0,0,,people use that to refer to the public, private, and so forth feature in Java--
Dialogue: 0,0:04:09.70,0:04:14.41,zh - 黄色,,0,0,0,,人们用它来指代 Java 中 public、private 等特性
Dialogue: 0,0:04:14.41,0:04:18.66,en - 白色,,0,0,0,,it has nothing to do with protection against people trying to do bad stuff with your code
Dialogue: 0,0:04:14.41,0:04:18.66,zh - 黄色,,0,0,0,,但它并不能避免有人对你的代码做坏事
Dialogue: 0,0:04:19.56,0:04:21.61,en - 白色,,0,0,0,,because, if they have access to your source code,
Dialogue: 0,0:04:19.56,0:04:21.61,zh - 黄色,,0,0,0,,因为如果他们能访问到你的源代码
Dialogue: 0,0:04:21.61,0:04:22.77,en - 白色,,0,0,0,,they can do whatever they want.
Dialogue: 0,0:04:21.61,0:04:22.77,zh - 黄色,,0,0,0,,他们就可以为所欲为
Dialogue: 0,0:04:24.05,0:04:25.45,en - 白色,,0,0,0,,So that's not it has to do with.
Dialogue: 0,0:04:24.05,0:04:25.45,zh - 黄色,,0,0,0,,访问控制无法避免
Dialogue: 0,0:04:25.45,0:04:31.60,en - 白色,,0,0,0,,It is, instead, simply a way to signal to other programmers you should not use this,
Dialogue: 0,0:04:25.45,0:04:31.60,zh - 黄色,,0,0,0,,相反，访问控制只是告诉其他程序员你不希望别人使用它
Dialogue: 0,0:04:31.77,0:04:34.05,en - 白色,,0,0,0,,and it's a soft restriction by the compiler
Dialogue: 0,0:04:31.77,0:04:34.05,zh - 黄色,,0,0,0,,这是编译器的软限制
Dialogue: 0,0:04:34.05,0:04:34.97,en - 白色,,0,0,0,,so you can't mess with it.
Dialogue: 0,0:04:34.05,0:04:34.97,zh - 黄色,,0,0,0,,你不能弄乱它
Dialogue: 0,0:04:35.65,0:04:38.62,en - 白色,,0,0,0,,Now, there's actually another side point I should mention here,
Dialogue: 0,0:04:35.65,0:04:38.62,zh - 黄色,,0,0,0,,实际上我应该在这强调另一点
Dialogue: 0,0:04:38.80,0:04:44.28,en - 白色,,0,0,0,,that if you make something public in Java, the expectation is that you will never, ever remove it.
Dialogue: 0,0:04:38.80,0:04:44.28,zh - 黄色,,0,0,0,,如果你在 Java 中将一些东西设为 public，就意味着你期望永远不会删除它
Dialogue: 0,0:04:44.84,0:04:48.20,en - 白色,,0,0,0,,In much the same way that if you sit down in a car that has no steering wheel,
Dialogue: 0,0:04:44.84,0:04:48.20,zh - 黄色,,0,0,0,,就像你坐在一辆没有方向盘的车里
Dialogue: 0,0:04:48.53,0:04:49.75,en - 白色,,0,0,0,,you're not going to want to drive it.
Dialogue: 0,0:04:48.53,0:04:49.75,zh - 黄色,,0,0,0,,你不会想开它的
Dialogue: 0,0:04:49.75,0:04:54.02,en - 白色,,0,0,0,,I mean, yes, it is technically possible there would be some joystick, but it's just not what people expect.
Dialogue: 0,0:04:49.75,0:04:54.02,zh - 黄色,,0,0,0,,从技术上讲可能会有一些操纵杆，但这不是人们所期望的
Dialogue: 0,0:04:54.80,0:04:58.55,en - 白色,,0,0,0,,So in the case of Java classes,
Dialogue: 0,0:04:54.80,0:04:58.55,zh - 黄色,,0,0,0,,在 Java 类的情况下
Dialogue: 0,0:04:58.64,0:05:00.17,en - 白色,,0,0,0,,whenever you provide a public method,
Dialogue: 0,0:04:58.64,0:05:00.17,zh - 黄色,,0,0,0,,每当你提供 public 方法时
Dialogue: 0,0:05:00.31,0:05:05.04,en - 白色,,0,0,0,,you're basically announcing to the world that they will have access to that method forever.
Dialogue: 0,0:05:00.31,0:05:05.04,zh - 黄色,,0,0,0,,你基本上是在向全世界宣布，这些方法永远可以使用
Dialogue: 0,0:05:05.67,0:05:08.88,en - 白色,,0,0,0,,So private is stuff you can mess with that the user never needs to know about.
Dialogue: 0,0:05:05.67,0:05:08.88,zh - 黄色,,0,0,0,,所以 private 是你可以随意摆弄但用户不知道的东西
Dialogue: 0,0:05:08.88,0:05:11.28,en - 白色,,0,0,0,,Public is something that should stay true forever.
Dialogue: 0,0:05:08.88,0:05:11.28,zh - 黄色,,0,0,0,,public 是应该永远保持不变的东西
Dialogue: 0,0:05:11.80,0:05:14.35,en - 白色,,0,0,0,,Otherwise, we break backwards compatibility with other code.
Dialogue: 0,0:05:11.80,0:05:14.35,zh - 黄色,,0,0,0,,否则我们会破坏与其他代码的向后兼容性
Dialogue: 0,0:05:15.28,0:05:20.11,en - 白色,,0,0,0,,So that's one thing we can do is make pieces of our class private.
Dialogue: 0,0:05:15.28,0:05:20.11,zh - 黄色,,0,0,0,,所以我们可以将类的这部分设为 private
Dialogue: 0,0:05:21.28,0:05:25.35,en - 白色,,0,0,0,,So another little augmentation we can do is nesting a class.
Dialogue: 0,0:05:21.28,0:05:25.35,zh - 黄色,,0,0,0,,我们还可以做的另一个小小的增强是嵌套类
Dialogue: 0,0:05:26.23,0:05:28.11,en - 白色,,0,0,0,,So if we think about this IntNode class--
Dialogue: 0,0:05:26.23,0:05:28.11,zh - 黄色,,0,0,0,,考虑一下这个 IntNode 类
Dialogue: 0,0:05:28.11,0:05:31.88,en - 白色,,0,0,0,,I accidentally closed the file, possibly, here it is--
Dialogue: 0,0:05:28.11,0:05:31.88,zh - 黄色,,0,0,0,,我不小心把文件关了...
Dialogue: 0,0:05:32.57,0:05:33.95,en - 白色,,0,0,0,,so here is IntNode.
Dialogue: 0,0:05:32.57,0:05:33.95,zh - 黄色,,0,0,0,,这就是 IntNode
Dialogue: 0,0:05:34.45,0:05:41.14,en - 白色,,0,0,0,,So it is possible to take this away and say IntNode it really should not be its own class, like file.
Dialogue: 0,0:05:34.45,0:05:41.14,zh - 黄色,,0,0,0,,可以把这些去掉，IntNode 不应该是单独的类
Dialogue: 0,0:05:41.14,0:05:44.62,en - 白色,,0,0,0,,It shouldn't be it's own Java file because it's really a feature of an SLList.
Dialogue: 0,0:05:41.14,0:05:44.62,zh - 黄色,,0,0,0,,不应该是单独的 Java 文件，实际上它是 SLList 的一个特性
Dialogue: 0,0:05:45.40,0:05:48.22,en - 白色,,0,0,0,,So in Java, it's pretty natural that you can just take a class
Dialogue: 0,0:05:45.40,0:05:48.22,zh - 黄色,,0,0,0,,在 Java 中很自然地你可以操作一个类
Dialogue: 0,0:05:48.22,0:05:51.66,en - 白色,,0,0,0,,and move it inside of another class declaration.
Dialogue: 0,0:05:48.22,0:05:51.66,zh - 黄色,,0,0,0,,将其移动到另一个类的声明中
Dialogue: 0,0:05:51.87,0:05:54.04,en - 白色,,0,0,0,,And if I compile this, it will work just fine.
Dialogue: 0,0:05:51.87,0:05:54.04,zh - 黄色,,0,0,0,,这个会编译成功的
Dialogue: 0,0:05:54.74,0:05:57.31,en - 白色,,0,0,0,,So you can move classes inside of other classes.
Dialogue: 0,0:05:54.74,0:05:57.31,zh - 黄色,,0,0,0,,你可以将类移动到其他类的内部
Dialogue: 0,0:05:57.31,0:06:00.15,en - 白色,,0,0,0,,This will be the boss, and this is now a subordinate class,
Dialogue: 0,0:05:57.31,0:06:00.15,zh - 黄色,,0,0,0,,这个是 boss，这个现在是从属类
Dialogue: 0,0:06:00.15,0:06:02.68,en - 白色,,0,0,0,,though in Java the term people use is nested class.
Dialogue: 0,0:06:00.15,0:06:02.68,zh - 黄色,,0,0,0,,Java 中人们使用的术语是嵌套类
Dialogue: 0,0:06:05.00,0:06:07.03,en - 白色,,0,0,0,,So this is a nested class definition.
Dialogue: 0,0:06:05.00,0:06:07.03,zh - 黄色,,0,0,0,,这是嵌套类的定义
Dialogue: 0,0:06:07.03,0:06:09.44,en - 白色,,0,0,0,,I made it public, but you can actually also make it private.
Dialogue: 0,0:06:07.03,0:06:09.44,zh - 黄色,,0,0,0,,我把它设为 public，但实际上你也可以把它设为 private
Dialogue: 0,0:06:10.55,0:06:12.53,en - 白色,,0,0,0,,It is typical, but not always,
Dialogue: 0,0:06:10.55,0:06:12.53,zh - 黄色,,0,0,0,,人们经常这样做
Dialogue: 0,0:06:12.68,0:06:17.81,en - 白色,,0,0,0,,that what you'll do is put the nested class definitions up top and everything else below.
Dialogue: 0,0:06:12.68,0:06:17.81,zh - 黄色,,0,0,0,,把嵌套类的定义放在上面，其他放在下面
Dialogue: 0,0:06:17.81,0:06:19.93,en - 白色,,0,0,0,,But you can do whatever you want.
Dialogue: 0,0:06:17.81,0:06:19.93,zh - 黄色,,0,0,0,,但你可以随意放置
Dialogue: 0,0:06:19.93,0:06:22.52,en - 白色,,0,0,0,,So typically, I'll take this and move it down here.
Dialogue: 0,0:06:19.93,0:06:22.52,zh - 黄色,,0,0,0,,只是通常情况下，我会把它移到这里
Dialogue: 0,0:06:22.52,0:06:25.86,en - 白色,,0,0,0,,But it just depends on the convention of the environment you're working on.
Dialogue: 0,0:06:22.52,0:06:25.86,zh - 黄色,,0,0,0,,这取决于你工作环境的习惯
Dialogue: 0,0:06:26.08,0:06:29.84,en - 白色,,0,0,0,,So if you work for a company that always puts nested classes up front, do that.
Dialogue: 0,0:06:26.08,0:06:29.84,zh - 黄色,,0,0,0,,如果你的公司习惯将嵌套类放在前面，就这样做
Dialogue: 0,0:06:30.14,0:06:31.64,en - 白色,,0,0,0,,If you're working for a project team
Dialogue: 0,0:06:30.14,0:06:31.64,zh - 黄色,,0,0,0,,如果你工作的项目团队
Dialogue: 0,0:06:31.64,0:06:33.66,en - 白色,,0,0,0,,where you always put it at the end do that instead.
Dialogue: 0,0:06:31.64,0:06:33.66,zh - 黄色,,0,0,0,,总是把它发放到最后，就那样做
Dialogue: 0,0:06:33.66,0:06:34.74,en - 白色,,0,0,0,,Doesn't matter what order.
Dialogue: 0,0:06:33.66,0:06:34.74,zh - 黄色,,0,0,0,,顺序无关紧要
Dialogue: 0,0:06:37.28,0:06:37.85,en - 白色,,0,0,0,,So why?
Dialogue: 0,0:06:37.28,0:06:37.85,zh - 黄色,,0,0,0,,为什么呢？
Dialogue: 0,0:06:37.85,0:06:39.40,en - 白色,,0,0,0,,What's good about a nested class?
Dialogue: 0,0:06:37.85,0:06:39.40,zh - 黄色,,0,0,0,,嵌套类有什么好处？
Dialogue: 0,0:06:39.40,0:06:43.26,en - 白色,,0,0,0,,Well, they're useful whenever a class you're declaring doesn't stand on its own,
Dialogue: 0,0:06:39.40,0:06:43.26,zh - 黄色,,0,0,0,,只要你定义的类不是独立存在的，这就很有用
Dialogue: 0,0:06:43.42,0:06:47.91,en - 白色,,0,0,0,,whenever it's obvious that an IntNode is really just something used by an SLList and only SLLists.
Dialogue: 0,0:06:43.42,0:06:47.91,zh - 黄色,,0,0,0,,显然，IntNode 只被 SLList 所使用
Dialogue: 0,0:06:48.96,0:06:53.48,en - 白色,,0,0,0,,It's subordinate to the SLList class in some way.
Dialogue: 0,0:06:48.96,0:06:53.48,zh - 黄色,,0,0,0,,它在某种程度上从属于 SLList 类
Dialogue: 0,0:06:54.51,0:06:59.11,en - 白色,,0,0,0,,Now, occasionally, you will actually want an external program to be able to
Dialogue: 0,0:06:54.51,0:06:59.11,zh - 黄色,,0,0,0,,偶尔你可能想让一个外部程序能够
Dialogue: 0,0:06:59.24,0:07:03.50,en - 白色,,0,0,0,,make instances of IntNodes or directly manipulate them in some way.
Dialogue: 0,0:06:59.24,0:07:03.50,zh - 黄色,,0,0,0,,创建 IntNode 的实例或以某种方式直接操作它们
Dialogue: 0,0:07:03.50,0:07:04.77,en - 白色,,0,0,0,,So I could, for example--
Dialogue: 0,0:07:03.50,0:07:04.77,zh - 黄色,,0,0,0,,举个例子
Dialogue: 0,0:07:05.26,0:07:06.92,en - 白色,,0,0,0,,this would be very strange behavior--
Dialogue: 0,0:07:05.26,0:07:06.92,zh - 黄色,,0,0,0,,这个行为会很奇怪
Dialogue: 0,0:07:06.92,0:07:10.15,en - 白色,,0,0,0,,but I could do something like public IntNode getFrontNode,
Dialogue: 0,0:07:06.92,0:07:10.15,zh - 黄色,,0,0,0,,这样 public IntNode getFrontNode()
Dialogue: 0,0:07:12.20,0:07:16.55,en - 白色,,0,0,0,,in which case I really need the IntNode class to be public
Dialogue: 0,0:07:12.20,0:07:16.55,zh - 黄色,,0,0,0,,在这种情况下，我确实需要 IntNode 类是 public
Dialogue: 0,0:07:16.55,0:07:20.48,en - 白色,,0,0,0,,so that someone is actually able to make IntNodes or have references to them.
Dialogue: 0,0:07:16.55,0:07:20.48,zh - 黄色,,0,0,0,,这样其他人就能够创建 IntNode 实例或拥有它们的引用
Dialogue: 0,0:07:20.96,0:07:26.06,en - 白色,,0,0,0,,But in a class like this where the user never needs to even know about IntNode,
Dialogue: 0,0:07:20.96,0:07:26.06,zh - 黄色,,0,0,0,,但是在这样的类中，用户甚至不需要知道 IntNode
Dialogue: 0,0:07:26.06,0:07:27.28,en - 白色,,0,0,0,,we can make this private.
Dialogue: 0,0:07:26.06,0:07:27.28,zh - 黄色,,0,0,0,,我们可以设为 private
Dialogue: 0,0:07:28.16,0:07:33.03,en - 白色,,0,0,0,,So in this way, what this says is that IntNodes can never be made by an external user.
Dialogue: 0,0:07:28.16,0:07:33.03,zh - 黄色,,0,0,0,,这种方式意味着 IntNode 永远不能由外部用户创建
Dialogue: 0,0:07:33.03,0:07:35.91,en - 白色,,0,0,0,,So if we have SLList user, you could not make an IntNode.
Dialogue: 0,0:07:33.03,0:07:35.91,zh - 黄色,,0,0,0,,SLList 的使用者无法创建 IntNode
Dialogue: 0,0:07:36.37,0:07:37.79,en - 白色,,0,0,0,,But we're kind of splitting hairs.
Dialogue: 0,0:07:36.37,0:07:37.79,zh - 黄色,,0,0,0,,我们有点吹毛求疵
Dialogue: 0,0:07:37.79,0:07:40.34,en - 白色,,0,0,0,,This is probably getting a little boring for a video.
Dialogue: 0,0:07:37.79,0:07:40.34,zh - 黄色,,0,0,0,,可能让视频有点无聊
Dialogue: 0,0:07:40.34,0:07:44.60,en - 白色,,0,0,0,,But the basic rule of thumb is, if nobody else ever needs an IntNode reference, make it private.
Dialogue: 0,0:07:40.34,0:07:44.60,zh - 黄色,,0,0,0,,但基本的经验是，如果没人需要 IntNode 的引用，就将其设为 private
Dialogue: 0,0:07:46.54,0:07:49.04,en - 白色,,0,0,0,,Now, to go one level deeper--
Dialogue: 0,0:07:46.54,0:07:49.04,zh - 黄色,,0,0,0,,继续深入了解
Dialogue: 0,0:07:49.04,0:07:52.66,en - 白色,,0,0,0,,and I don't want to get too much into minutiae of Java--
Dialogue: 0,0:07:49.04,0:07:52.66,zh - 黄色,,0,0,0,,我其实不想过多地讨论 Java 的细节...
Dialogue: 0,0:07:53.24,0:07:56.30,en - 白色,,0,0,0,,but if it is the case that the nested class--
Dialogue: 0,0:07:53.24,0:07:56.30,zh - 黄色,,0,0,0,,但是如果嵌套类是这样...
Dialogue: 0,0:07:56.30,0:08:01.31,en - 白色,,0,0,0,,so I said make this private if no external class uses IntNodes, OK--
Dialogue: 0,0:07:56.30,0:08:01.31,zh - 黄色,,0,0,0,,如果没有外部类使用 IntNodes 就把它设为 private 对吧
Dialogue: 0,0:08:01.97,0:08:03.83,en - 白色,,0,0,0,,so this is yet another thing like that.
Dialogue: 0,0:08:01.97,0:08:03.83,zh - 黄色,,0,0,0,,还有一件类似的事情
Dialogue: 0,0:08:03.83,0:08:08.99,en - 白色,,0,0,0,,If the IntNode class never uses any detail of the SLList class,
Dialogue: 0,0:08:03.83,0:08:08.99,zh - 黄色,,0,0,0,,如果 IntNode 类从不使用 SLList 类的任何详细信息
Dialogue: 0,0:08:08.99,0:08:10.91,en - 白色,,0,0,0,,if the nested class never needs to look out,
Dialogue: 0,0:08:08.99,0:08:10.91,zh - 黄色,,0,0,0,,如果嵌套类从不需要的话
Dialogue: 0,0:08:11.19,0:08:13.08,en - 白色,,0,0,0,,you can add the word static here.
Dialogue: 0,0:08:11.19,0:08:13.08,zh - 黄色,,0,0,0,,可以在这里加上 static
Dialogue: 0,0:08:13.64,0:08:17.86,en - 白色,,0,0,0,,Now, that probably seems like this word static pops up in a lot of strange places.
Dialogue: 0,0:08:13.64,0:08:17.86,zh - 黄色,,0,0,0,,好像 static 出现在了好多奇怪的地方
Dialogue: 0,0:08:19.34,0:08:22.59,en - 白色,,0,0,0,,I'm not going to go into right now why I decided to use the word static,
Dialogue: 0,0:08:19.34,0:08:22.59,zh - 黄色,,0,0,0,,我现在不打算深入讨论为什么我决定使用 static
Dialogue: 0,0:08:22.59,0:08:26.80,en - 白色,,0,0,0,,but you can imagine this keyword could be never looks outwards.
Dialogue: 0,0:08:22.59,0:08:26.80,zh - 黄色,,0,0,0,,但你可以想象，这个关键词永远不会向外看
Dialogue: 0,0:08:27.45,0:08:28.31,en - 白色,,0,0,0,,But it's not.
Dialogue: 0,0:08:27.45,0:08:28.31,zh - 黄色,,0,0,0,,其实不是这些
Dialogue: 0,0:08:28.31,0:08:29.06,en - 白色,,0,0,0,,It's static.
Dialogue: 0,0:08:28.31,0:08:29.06,zh - 黄色,,0,0,0,,是 static
Dialogue: 0,0:08:29.84,0:08:33.48,en - 白色,,0,0,0,,And what that means is that the IntNode class,
Dialogue: 0,0:08:29.84,0:08:33.48,zh - 黄色,,0,0,0,,这意味着 IntNode 类
Dialogue: 0,0:08:33.65,0:08:36.14,en - 白色,,0,0,0,,I could not write a method here that uses first.
Dialogue: 0,0:08:33.65,0:08:36.14,zh - 黄色,,0,0,0,,我不能在这编写使用 first 的方法
Dialogue: 0,0:08:36.14,0:08:37.00,en - 白色,,0,0,0,,That would not be allowed.
Dialogue: 0,0:08:36.14,0:08:37.00,zh - 黄色,,0,0,0,,这是不允许的
Dialogue: 0,0:08:37.85,0:08:40.26,en - 白色,,0,0,0,,So since this is no class, if you look at it,
Dialogue: 0,0:08:37.85,0:08:40.26,zh - 黄色,,0,0,0,,因为这不是类，仔细看一下
Dialogue: 0,0:08:40.61,0:08:43.54,en - 白色,,0,0,0,,it has its own item, its own next constructor,
Dialogue: 0,0:08:40.61,0:08:43.54,zh - 黄色,,0,0,0,,它有自己的 item、next 和构造函数
Dialogue: 0,0:08:43.54,0:08:46.13,en - 白色,,0,0,0,,but never does it try and use any of SLList's stuff-- 
Dialogue: 0,0:08:43.54,0:08:46.13,zh - 黄色,,0,0,0,,但是它从来没有使用任何 SLList 的东西
Dialogue: 0,0:08:46.22,0:08:49.31,en - 白色,,0,0,0,,none of its methods, none of its constructors, none of its variables.
Dialogue: 0,0:08:46.22,0:08:49.31,zh - 黄色,,0,0,0,,没用它的方法，没用它的构造函数，没用它的变量
Dialogue: 0,0:08:49.31,0:08:50.40,en - 白色,,0,0,0,,So we can make it static.
Dialogue: 0,0:08:49.31,0:08:50.40,zh - 黄色,,0,0,0,,所以可以将它设为 static
Dialogue: 0,0:08:51.35,0:08:52.83,en - 白色,,0,0,0,,Now, what good is that?
Dialogue: 0,0:08:51.35,0:08:52.83,zh - 黄色,,0,0,0,,这有什么好处呢？
Dialogue: 0,0:08:52.83,0:08:57.15,en - 白色,,0,0,0,,Well, it gives you a tiny little bit of memory savings for each IntNode.
Dialogue: 0,0:08:52.83,0:08:57.15,zh - 黄色,,0,0,0,,它可以为每个 IntNode 节省一点点内存
Dialogue: 0,0:08:57.31,0:08:59.51,en - 白色,,0,0,0,,And you can look in the book for a little more details on that.
Dialogue: 0,0:08:57.31,0:08:59.51,zh - 黄色,,0,0,0,,你可以在书里找到更多关于这方面的细节
Dialogue: 0,0:08:59.78,0:09:05.64,en - 白色,,0,0,0,,But the basic idea is simply that a nested class which is static cannot access any of the outer class's stuff.
Dialogue: 0,0:08:59.78,0:09:05.64,zh - 黄色,,0,0,0,,但其基本思想很简单，即 static 嵌套类不能访问外部类的任何内容
Dialogue: 0,0:09:06.42,0:09:10.86,en - 白色,,0,0,0,,Now, I'm sure that I pushed you to the limit of the amount of syntax that you can fit in your brain without any practice,
Dialogue: 0,0:09:06.42,0:09:10.86,zh - 黄色,,0,0,0,,现在我已经把在不经过练习的情况下，你能接受的最大数量的语法传授给你了
Dialogue: 0,0:09:11.06,0:09:12.42,en - 白色,,0,0,0,,so don't fret this too much.
Dialogue: 0,0:09:11.06,0:09:12.42,zh - 黄色,,0,0,0,,别太担心
Dialogue: 0,0:09:12.42,0:09:15.68,en - 白色,,0,0,0,,This is something you'll get a chance to explore a little bit in project 1.
Dialogue: 0,0:09:12.42,0:09:15.68,zh - 黄色,,0,0,0,,项目1中你有机会自行探索
Dialogue: 0,0:09:17.93,0:09:23.20,en - 白色,,0,0,0,,And at the risk of making this lecture even a little more boring and a little more minute,
Dialogue: 0,0:09:17.93,0:09:23.20,zh - 黄色,,0,0,0,,冒着让这节课程变得更无聊的风险
Dialogue: 0,0:09:23.37,0:09:25.66,en - 白色,,0,0,0,,I will make the very minor note that,
Dialogue: 0,0:09:23.37,0:09:25.66,zh - 黄色,,0,0,0,,我再做一个次要说明
Dialogue: 0,0:09:25.80,0:09:30.88,en - 白色,,0,0,0,,whenever you make a nested class private, these access modifiers no longer really matter.
Dialogue: 0,0:09:25.80,0:09:30.88,zh - 黄色,,0,0,0,,当你将嵌套类设为 static 时，这些修饰符就不再重要了
Dialogue: 0,0:09:31.43,0:09:33.57,en - 白色,,0,0,0,,But not an important Java detail.
Dialogue: 0,0:09:31.43,0:09:33.57,zh - 黄色,,0,0,0,,这些 Java 细节不重要
Dialogue: 0,0:09:34.49,0:09:39.56,en - 白色,,0,0,0,,So those are a couple of more improvements we could basically make to our SLList class.
Dialogue: 0,0:09:34.49,0:09:39.56,zh - 黄色,,0,0,0,,以上就是我们对 SLList 类进行的更多改进
Dialogue: 0,0:09:39.56,0:09:42.80,en - 白色,,0,0,0,,We can make this class a private static nested class,
Dialogue: 0,0:09:39.56,0:09:42.80,zh - 黄色,,0,0,0,,我们可以设置一个 private static 的嵌套类
Dialogue: 0,0:09:41.75,0:09:44.75,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:09:42.80,0:09:44.75,en - 白色,,0,0,0,,and we can make the first variable private.
Dialogue: 0,0:09:42.80,0:09:44.75,zh - 黄色,,0,0,0,,还可以将 first 变量设为 private
