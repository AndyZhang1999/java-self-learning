[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: 4-6 Caching.mp4
Video File: 4-6 Caching.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Scroll Position: 121
Active Line: 136
Video Position: 13146

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:00.87,0:00:04.56,en - 白色,,0,0,0,,So our SLList class now has these new fancy methods-- size and addLast,
Dialogue: 0,0:00:00.87,0:00:04.56,zh - 黄色,,0,0,0,,我们的 SLList 类现在有了新的方法——size 和 addLast
Dialogue: 0,0:00:05.06,0:00:05.93,en - 白色,,0,0,0,,but there are some issues.
Dialogue: 0,0:00:05.06,0:00:05.93,zh - 黄色,,0,0,0,,但有一些问题
Dialogue: 0,0:00:06.23,0:00:07.42,en - 白色,,0,0,0,,Both of them are pretty slow,
Dialogue: 0,0:00:06.23,0:00:07.42,zh - 黄色,,0,0,0,,它们两个都很慢
Dialogue: 0,0:00:07.67,0:00:10.86,en - 白色,,0,0,0,,and we're going to focus on the size method in this particular lecture
Dialogue: 0,0:00:07.67,0:00:10.86,zh - 黄色,,0,0,0,,这节课我们重点讲解 size 方法
Dialogue: 0,0:00:11.86,0:00:13.37,en - 白色,,0,0,0,,and discuss how to make it more efficient.
Dialogue: 0,0:00:11.86,0:00:13.37,zh - 黄色,,0,0,0,,并讨论如何使其更有效率
Dialogue: 0,0:00:14.40,0:00:15.88,en - 白色,,0,0,0,,So how slow is size?
Dialogue: 0,0:00:14.40,0:00:15.88,zh - 黄色,,0,0,0,,size 有多慢呢？
Dialogue: 0,0:00:16.34,0:00:21.38,en - 白色,,0,0,0,,Well, to maybe bring this to the forum and make you think about it in the following way.
Dialogue: 0,0:00:16.34,0:00:21.38,zh - 黄色,,0,0,0,,也许可以将它带入论坛，让你从下述方式思考
Dialogue: 0,0:00:22.31,0:00:26.04,en - 白色,,0,0,0,,Let's suppose size takes 2 seconds to process a list of size 1,000.
Dialogue: 0,0:00:22.31,0:00:26.04,zh - 黄色,,0,0,0,,假设 size 处理大小为1000的列表需要2秒
Dialogue: 0,0:00:26.24,0:00:30.88,en - 白色,,0,0,0,,That is, size-- which steps through the list one item at a time until it finally reaches the end--
Dialogue: 0,0:00:26.24,0:00:30.88,zh - 黄色,,0,0,0,,也就是说 size 一项又一项的遍历到达尾部
Dialogue: 0,0:00:31.40,0:00:32.73,en - 白色,,0,0,0,,is going to take 1,000 seconds.
Dialogue: 0,0:00:31.40,0:00:32.73,zh - 黄色,,0,0,0,,需要1000秒
Dialogue: 0,0:00:33.38,0:00:35.48,en - 白色,,0,0,0,,Now, you don't really know exactly how a computer works,
Dialogue: 0,0:00:33.38,0:00:35.48,zh - 黄色,,0,0,0,,现在你并不是真的知道计算机是如何工作的
Dialogue: 0,0:00:35.48,0:00:39.97,en - 白色,,0,0,0,,but just using your intuition, how long do you think it will take on a list of size a million?
Dialogue: 0,0:00:35.48,0:00:39.97,zh - 黄色,,0,0,0,,但是仅凭直觉，你认为一个大小为一百万的 List 需要多久呢？
Dialogue: 0,0:00:40.16,0:00:41.16,en - 白色,,0,0,0,,So ponder that for a moment.
Dialogue: 0,0:00:40.16,0:00:41.16,zh - 黄色,,0,0,0,,仔细考虑这一点
Dialogue: 0,0:00:43.88,0:00:46.23,en - 白色,,0,0,0,,So I say the answer is 2,000 seconds.
Dialogue: 0,0:00:43.88,0:00:46.23,zh - 黄色,,0,0,0,,答案是2000秒
Dialogue: 0,0:00:46.46,0:00:48.98,en - 白色,,0,0,0,,That if I have a list that's 1,000 times as large,
Dialogue: 0,0:00:46.46,0:00:48.98,zh - 黄色,,0,0,0,,如果我有一个1000倍大的 List
Dialogue: 0,0:00:49.05,0:00:50.89,en - 白色,,0,0,0,,then whatever the computer is doing inside--
Dialogue: 0,0:00:49.05,0:00:50.89,zh - 黄色,,0,0,0,,那么无论计算机在里面做什么
Dialogue: 0,0:00:50.89,0:00:52.40,en - 白色,,0,0,0,,and it has to step through the list--
Dialogue: 0,0:00:50.89,0:00:52.40,zh - 黄色,,0,0,0,,它必须一步一步地遍历
Dialogue: 0,0:00:52.72,0:00:55.54,en - 白色,,0,0,0,,it's going to have to do that 1,000 times as many times,
Dialogue: 0,0:00:52.72,0:00:55.54,zh - 黄色,,0,0,0,,它将不得不这样做1000次
Dialogue: 0,0:00:55.73,0:00:59.24,en - 白色,,0,0,0,,so it should take 1,000 times as many seconds for this total of 2,000.
Dialogue: 0,0:00:55.73,0:00:59.24,zh - 黄色,,0,0,0,,所以应该是1000秒的1000倍——2000秒
Dialogue: 0,0:01:00.47,0:01:02.27,en - 白色,,0,0,0,,So the more interesting question is how do we fix that?
Dialogue: 0,0:01:00.47,0:01:02.27,zh - 黄色,,0,0,0,,更有趣的问题是我们如何解决？
Dialogue: 0,0:01:02.92,0:01:05.76,en - 白色,,0,0,0,,And so I'm going to leave this as a puzzle for you that I'd really like you to ponder
Dialogue: 0,0:01:02.92,0:01:05.76,zh - 黄色,,0,0,0,,我要把这作为一个谜题留给你们，我真的希望你们好好思考
Dialogue: 0,0:01:06.08,0:01:11.23,en - 白色,,0,0,0,,to figure out a way to make size really fast no matter how big the list is.
Dialogue: 0,0:01:06.08,0:01:11.23,zh - 黄色,,0,0,0,,想办法让 size 变得更快，不管 List 有多大
Dialogue: 0,0:01:11.49,0:01:13.38,en - 白色,,0,0,0,,I don't care if there's a billion items. I want it quick.
Dialogue: 0,0:01:11.49,0:01:13.38,zh - 黄色,,0,0,0,,我不在乎是否有十亿项，只想快点
Dialogue: 0,0:01:13.78,0:01:15.24,en - 白色,,0,0,0,,So think about how you might do that,
Dialogue: 0,0:01:13.78,0:01:15.24,zh - 黄色,,0,0,0,,想一想你会怎么做
Dialogue: 0,0:01:15.94,0:01:17.44,en - 白色,,0,0,0,,and I will wait here patiently.
Dialogue: 0,0:01:15.94,0:01:17.44,zh - 黄色,,0,0,0,,我会在这里耐心等待
Dialogue: 0,0:01:22.23,0:01:30.91,en - 白色,,0,0,0,,So what I propose is that we-- instead of calculating the size on the fly every time size is called,
Dialogue: 0,0:01:22.23,0:01:30.91,zh - 黄色,,0,0,0,,我的建议是，不要每次调用 size 都要遍历一次
Dialogue: 0,0:01:30.96,0:01:32.08,en - 白色,,0,0,0,,which could take a long time,
Dialogue: 0,0:01:30.96,0:01:32.08,zh - 黄色,,0,0,0,,这可能需要很长时间
Dialogue: 0,0:01:32.46,0:01:35.18,en - 白色,,0,0,0,,we're going to set aside some information about the size up front.
Dialogue: 0,0:01:32.46,0:01:35.18,zh - 黄色,,0,0,0,,我们打算预留一些关于 size 的信息
Dialogue: 0,0:01:35.82,0:01:37.44,en - 白色,,0,0,0,,So I'm going to have private int size,
Dialogue: 0,0:01:35.82,0:01:37.44,zh - 黄色,,0,0,0,,新建 private int size
Dialogue: 0,0:01:37.68,0:01:41.08,en - 白色,,0,0,0,,and that's going to represent the current amount of information in the data structure.
Dialogue: 0,0:01:37.68,0:01:41.08,zh - 黄色,,0,0,0,,这将表示数据结构中当前的信息量
Dialogue: 0,0:01:41.70,0:01:44.32,en - 白色,,0,0,0,,So what's the size of a SLList of 1 item?
Dialogue: 0,0:01:41.70,0:01:44.32,zh - 黄色,,0,0,0,,那么1个项目的 SLList 的大小是多少呢？
Dialogue: 0,0:01:44.70,0:01:45.20,en - 白色,,0,0,0,,1.
Dialogue: 0,0:01:44.70,0:01:45.20,zh - 黄色,,0,0,0,,1
Dialogue: 0,0:01:45.78,0:01:50.53,en - 白色,,0,0,0,,What should I do whenever I add an item to the-- what should you change about the Size size plus equals 1.
Dialogue: 0,0:01:45.78,0:01:50.53,zh - 黄色,,0,0,0,,每次新增一项时，size 应该加1
Dialogue: 0,0:01:51.51,0:01:53.55,en - 白色,,0,0,0,,What about getFirst? Should the size change?
Dialogue: 0,0:01:51.51,0:01:53.55,zh - 黄色,,0,0,0,,getFirst 呢？size 应该修改吗？
Dialogue: 0,0:01:53.65,0:01:54.15,en - 白色,,0,0,0,,No.
Dialogue: 0,0:01:53.65,0:01:54.15,zh - 黄色,,0,0,0,,不应该
Dialogue: 0,0:01:55.13,0:01:56.00,en - 白色,,0,0,0,,AddLast.
Dialogue: 0,0:01:55.13,0:01:56.00,zh - 黄色,,0,0,0,,AddLast
Dialogue: 0,0:01:56.80,0:01:58.67,en - 白色,,0,0,0,,And indeed, we will add 1 to the size.
Dialogue: 0,0:01:56.80,0:01:58.67,zh - 黄色,,0,0,0,,size 应该加1
Dialogue: 0,0:01:58.67,0:01:59.67,en - 白色,,0,0,0,,I'll do it at the front.
Dialogue: 0,0:01:58.67,0:01:59.67,zh - 黄色,,0,0,0,,放在前面
Dialogue: 0,0:01:59.94,0:02:00.90,en - 白色,,0,0,0,,It doesn't matter where.
Dialogue: 0,0:01:59.94,0:02:00.90,zh - 黄色,,0,0,0,,位置并不重要
Dialogue: 0,0:02:02.37,0:02:06.79,en - 白色,,0,0,0,,So that is all we need for the size to be updated.
Dialogue: 0,0:02:02.37,0:02:06.79,zh - 黄色,,0,0,0,,这就是我们更新 size 所需的全部内容
Dialogue: 0,0:02:07.31,0:02:09.11,en - 白色,,0,0,0,,And so now we come to the size method.
Dialogue: 0,0:02:07.31,0:02:09.11,zh - 黄色,,0,0,0,,现在我们来看看 size 方法
Dialogue: 0,0:02:10.24,0:02:15.52,en - 白色,,0,0,0,,Well now, rather than calculate, I'm going to delete all this beautiful code we just spent so much effort discussing.
Dialogue: 0,0:02:10.24,0:02:15.52,zh - 黄色,,0,0,0,,现在不需要计算了，我要删除花了这么多精力讨论的所有漂亮的代码
Dialogue: 0,0:02:15.52,0:02:20.00,en - 白色,,0,0,0,,This code that speaks the secret language of the gods is going to be buried beneath the earth.
Dialogue: 0,0:02:15.52,0:02:20.00,zh - 黄色,,0,0,0,,这个会说众神秘密语言的代码将被埋在地下
Dialogue: 0,0:02:20.49,0:02:22.16,en - 白色,,0,0,0,,And instead, we're going to return size.
Dialogue: 0,0:02:20.49,0:02:22.16,zh - 黄色,,0,0,0,,取而代之的是返回 size
Dialogue: 0,0:02:22.16,0:02:23.36,en - 白色,,0,0,0,,That's pretty typical, right?
Dialogue: 0,0:02:22.16,0:02:23.36,zh - 黄色,,0,0,0,,这很典型对吧？
Dialogue: 0,0:02:23.36,0:02:26.57,en - 白色,,0,0,0,,Like, when you write a book of arcane evil from ancient gods,
Dialogue: 0,0:02:23.36,0:02:26.57,zh - 黄色,,0,0,0,,就像写一本来自古代神灵的神秘邪恶之书时
Dialogue: 0,0:02:26.57,0:02:28.53,en - 白色,,0,0,0,,or whatever, usually, once you're done with it,
Dialogue: 0,0:02:26.57,0:02:28.53,zh - 黄色,,0,0,0,,通常情况下，一旦你做完了
Dialogue: 0,0:02:28.53,0:02:32.34,en - 白色,,0,0,0,,you discard it to be discovered later at some day to destroy civilization.
Dialogue: 0,0:02:28.53,0:02:32.34,zh - 黄色,,0,0,0,,丢弃它，等以后有一天被发现来摧毁文明
Dialogue: 0,0:02:32.34,0:02:33.56,en - 白色,,0,0,0,,So we'll just say that's what we're doing.
Dialogue: 0,0:02:32.34,0:02:33.56,zh - 黄色,,0,0,0,,这就是我们所做的
Dialogue: 0,0:02:34.16,0:02:37.43,en - 白色,,0,0,0,,But we'll find that in later parts of this class,
Dialogue: 0,0:02:34.16,0:02:37.43,zh - 黄色,,0,0,0,,但是我们会发现，在课程后面部分
Dialogue: 0,0:02:37.43,0:02:42.04,en - 白色,,0,0,0,,and in the projects, you will actually be using that pattern of having the secret language of the gods.
Dialogue: 0,0:02:37.43,0:02:42.04,zh - 黄色,,0,0,0,,在项目中， 你实际上将使用的是拥有神之语的模式
Dialogue: 0,0:02:42.20,0:02:43.59,en - 白色,,0,0,0,,But here, it's actually easier for us
Dialogue: 0,0:02:42.20,0:02:43.59,zh - 黄色,,0,0,0,,但在这里这样更容易
Dialogue: 0,0:02:43.59,0:02:47.86,en - 白色,,0,0,0,,to just compute the size upfront and return it whenever we're ready for it.
Dialogue: 0,0:02:43.59,0:02:47.86,zh - 黄色,,0,0,0,,提前计算大小并在需要的时候返回它
Dialogue: 0,0:02:49.05,0:02:51.86,en - 白色,,0,0,0,,So now when we print out the size, we still get 4.
Dialogue: 0,0:02:49.05,0:02:51.86,zh - 黄色,,0,0,0,,现在打印 size 仍然得到4
Dialogue: 0,0:02:52.05,0:02:54.16,en - 白色,,0,0,0,,But it doesn't matter how big the list is.
Dialogue: 0,0:02:52.05,0:02:54.16,zh - 黄色,,0,0,0,,List 有多大并不重要
Dialogue: 0,0:02:54.33,0:02:55.55,en - 白色,,0,0,0,,This will be very fast.
Dialogue: 0,0:02:54.33,0:02:55.55,zh - 黄色,,0,0,0,,这非常快
Dialogue: 0,0:02:55.75,0:02:56.21,en - 白色,,0,0,0,,We did it.
Dialogue: 0,0:02:55.75,0:02:56.21,zh - 黄色,,0,0,0,,我们做到了
Dialogue: 0,0:02:59.08,0:03:06.32,en - 白色,,0,0,0,,So to debrief, basically, what we just did is we maintained a special size variable that caches the size of the list.
Dialogue: 0,0:02:59.08,0:03:06.32,zh - 黄色,,0,0,0,,简而言之，我们刚才所做的就是维护了一个特殊的 size 变量来缓存 List 的大小
Dialogue: 0,0:03:06.48,0:03:09.72,en - 白色,,0,0,0,,So any time the size of the list changes, we update it.
Dialogue: 0,0:03:06.48,0:03:09.72,zh - 黄色,,0,0,0,,因此只要 List 的大小发生变化，我们就会对其更新
Dialogue: 0,0:03:09.84,0:03:14.42,en - 白色,,0,0,0,,And caching is just a fancy term for putting aside some data to speed up retrieval at some later date.
Dialogue: 0,0:03:09.84,0:03:14.42,zh - 黄色,,0,0,0,,缓存只是一个花哨的术语，意思是把数据放在一边，以便加快检索速度
Dialogue: 0,0:03:14.95,0:03:17.23,en - 白色,,0,0,0,,It is redundant, but it also speeds us up.
Dialogue: 0,0:03:14.95,0:03:17.23,zh - 黄色,,0,0,0,,它是多余的，但加快了速度
Dialogue: 0,0:03:18.00,0:03:19.53,en - 白色,,0,0,0,,Now, it doesn't come for free.
Dialogue: 0,0:03:18.00,0:03:19.53,zh - 黄色,,0,0,0,,它不是毫无成本的
Dialogue: 0,0:03:19.66,0:03:22.12,en - 白色,,0,0,0,,There's this old saying that there ain't no such thing as a free lunch.
Dialogue: 0,0:03:19.66,0:03:22.12,zh - 黄色,,0,0,0,,有句老话说，天下没有免费的午餐
Dialogue: 0,0:03:22.38,0:03:23.60,en - 白色,,0,0,0,,We did have to do some work.
Dialogue: 0,0:03:22.38,0:03:23.60,zh - 黄色,,0,0,0,,我们确实需要做一些工作
Dialogue: 0,0:03:24.03,0:03:29.05,en - 白色,,0,0,0,,What we changed is that every time the size of the list is modified, we have to tweak the size a little bit.
Dialogue: 0,0:03:24.03,0:03:29.05,zh - 黄色,,0,0,0,,每次修改 List 的大小时，都必须稍微调整一下 size
Dialogue: 0,0:03:29.44,0:03:35.11,en - 白色,,0,0,0,,But it doesn't really have a meaningful impact on our performance, and for any practical circumstance that I can imagine,
Dialogue: 0,0:03:29.44,0:03:35.11,zh - 黄色,,0,0,0,,但尽我所想，它对我们的表现并没有真正意义的影响
Dialogue: 0,0:03:35.62,0:03:38.93,en - 白色,,0,0,0,,spreading that work of calculating the size over each add call,
Dialogue: 0,0:03:35.62,0:03:38.93,zh - 黄色,,0,0,0,,将 size 的计算工作分散到每个 add 调用上
Dialogue: 0,0:03:39.10,0:03:42.49,en - 白色,,0,0,0,,to me, is a net win in almost any case I can even imagine.
Dialogue: 0,0:03:39.10,0:03:42.49,zh - 黄色,,0,0,0,,对我来说怎么都是净赚
Dialogue: 0,0:03:43.14,0:03:48.33,en - 白色,,0,0,0,,Let's look at a visual that compares our naked recursive data structure with our SLList in the context of caching.
Dialogue: 0,0:03:43.14,0:03:48.33,zh - 黄色,,0,0,0,,让我们在视觉上看一下缓存上下文在裸递归和 SLList 中的比较
Dialogue: 0,0:03:48.99,0:03:51.52,en - 白色,,0,0,0,,So before, we said SLLists have this nice advantage
Dialogue: 0,0:03:48.99,0:03:51.52,zh - 黄色,,0,0,0,,之前我们说 SLList 有个很好的优势
Dialogue: 0,0:03:51.66,0:03:53.40,en - 白色,,0,0,0,,that whenever you want to manipulate the data
Dialogue: 0,0:03:51.66,0:03:53.40,zh - 黄色,,0,0,0,,每当你想要操纵数据的时候
Dialogue: 0,0:03:53.40,0:03:56.97,en - 白色,,0,0,0,,or see the data, you have to go through this middleman.
Dialogue: 0,0:03:53.40,0:03:56.97,zh - 黄色,,0,0,0,,或者你想查看数据时，得通过这个中间人
Dialogue: 0,0:03:57.32,0:04:01.56,en - 白色,,0,0,0,,This middleman provides you with very easy to understand methods that are guaranteed safe
Dialogue: 0,0:03:57.32,0:04:01.56,zh - 黄色,,0,0,0,,这个中间人提供了非常容易理解并且保证安全的方法
Dialogue: 0,0:04:01.76,0:04:04.41,en - 白色,,0,0,0,,and avoid you from shooting yourself in the foot in various ways.
Dialogue: 0,0:04:01.76,0:04:04.41,zh - 黄色,,0,0,0,,避免你用各种方式砸自己的脚
Dialogue: 0,0:04:05.10,0:04:08.75,en - 白色,,0,0,0,,Now, another nice advantage of the SLList structure to have this middleman
Dialogue: 0,0:04:05.10,0:04:08.75,zh - 黄色,,0,0,0,,现在 SLList 结构拥有中间人的另一个优点是
Dialogue: 0,0:04:08.75,0:04:10.95,en - 白色,,0,0,0,,is that it serves as a natural place
Dialogue: 0,0:04:08.75,0:04:10.95,zh - 黄色,,0,0,0,,这是个很自然的空间
Dialogue: 0,0:04:10.95,0:04:13.37,en - 白色,,0,0,0,,to store meta information about the entire list.
Dialogue: 0,0:04:10.95,0:04:13.37,zh - 黄色,,0,0,0,,用来存储整个 List 的元信息
Dialogue: 0,0:04:13.87,0:04:17.32,en - 白色,,0,0,0,,So for example, we can store the size of the list here.
Dialogue: 0,0:04:13.87,0:04:17.32,zh - 黄色,,0,0,0,,例如我们可以在这里存储 List 的大小
Dialogue: 0,0:04:17.68,0:04:18.84,en - 白色,,0,0,0,,It is technically redundant.
Dialogue: 0,0:04:17.68,0:04:18.84,zh - 黄色,,0,0,0,,从技术上讲这是多余的
Dialogue: 0,0:04:19.05,0:04:21.32,en - 白色,,0,0,0,,You can compute the size without this variable,
Dialogue: 0,0:04:19.05,0:04:21.32,zh - 黄色,,0,0,0,,没有此变量也可以计算 size
Dialogue: 0,0:04:21.32,0:04:25.04,en - 白色,,0,0,0,,but it speeds up the computation of size because you just need to return this value.
Dialogue: 0,0:04:21.32,0:04:25.04,zh - 黄色,,0,0,0,,但它加快了 size 的计算速度，只需要返回此值
Dialogue: 0,0:04:25.42,0:04:26.88,en - 白色,,0,0,0,,You can also store other things here, right?
Dialogue: 0,0:04:25.42,0:04:26.88,zh - 黄色,,0,0,0,,你还可以在这里存放其他东西
Dialogue: 0,0:04:26.88,0:04:29.12,en - 白色,,0,0,0,,Like you could store like the maximum, or the minimum,
Dialogue: 0,0:04:26.88,0:04:29.12,zh - 黄色,,0,0,0,,比如最大值或最小值
Dialogue: 0,0:04:29.12,0:04:30.79,en - 白色,,0,0,0,,or the largest value that was ever put in there,
Dialogue: 0,0:04:29.12,0:04:30.79,zh - 黄色,,0,0,0,,或者是有史以来投入的最大价值
Dialogue: 0,0:04:31.14,0:04:32.34,en - 白色,,0,0,0,,and those would also work.
Dialogue: 0,0:04:31.14,0:04:32.34,zh - 黄色,,0,0,0,,而且这些也都有效
Dialogue: 0,0:04:33.18,0:04:36.42,en - 白色,,0,0,0,,By contrast, with a naked recursive list, it's not so easy.
Dialogue: 0,0:04:33.18,0:04:36.42,zh - 黄色,,0,0,0,,相比之下，使用裸递归 List 就不那么容易了
Dialogue: 0,0:04:36.69,0:04:40.68,en - 白色,,0,0,0,,You could, in principle, do something like cache the size inside of each node.
Dialogue: 0,0:04:36.69,0:04:40.68,zh - 黄色,,0,0,0,,原则上，你可以在每个节点内缓存 size
Dialogue: 0,0:04:40.68,0:04:44.28,en - 白色,,0,0,0,,But even then, that means that any time you change something in the list,
Dialogue: 0,0:04:40.68,0:04:44.28,zh - 黄色,,0,0,0,,但即便如此，只要你改变了 List 上的某些东西
Dialogue: 0,0:04:44.43,0:04:46.96,en - 白色,,0,0,0,,you have to update a bunch of size variables.
Dialogue: 0,0:04:44.43,0:04:46.96,zh - 黄色,,0,0,0,,就必须更新一系列 size 变量
Dialogue: 0,0:04:47.28,0:04:50.30,en - 白色,,0,0,0,,You could also, for example, somehow, if you had a language that allows it,
Dialogue: 0,0:04:47.28,0:04:50.30,zh - 黄色,,0,0,0,,你也可以...假如有这样一种语言
Dialogue: 0,0:04:50.48,0:04:53.73,en - 白色,,0,0,0,,bind a variable up here that tracks the size of the whole thing.
Dialogue: 0,0:04:50.48,0:04:53.73,zh - 黄色,,0,0,0,,允许在这里绑定变量跟踪 size
Dialogue: 0,0:04:53.73,0:04:56.35,en - 白色,,0,0,0,,But in Java, there's no natural facility to do that.
Dialogue: 0,0:04:53.73,0:04:56.35,zh - 黄色,,0,0,0,,但在 Java 中不行
Dialogue: 0,0:04:56.59,0:05:00.63,en - 白色,,0,0,0,,So in effect, what you'll end up doing is having multiple variables that you have to keep straight.
Dialogue: 0,0:04:56.59,0:05:00.63,zh - 黄色,,0,0,0,,其实你就是想维护多个变量保持不变
Dialogue: 0,0:05:00.96,0:05:06.74,en - 白色,,0,0,0,,Here, this object-oriented programming approach means that we let the object control everything.
Dialogue: 0,0:05:00.96,0:05:06.74,zh - 黄色,,0,0,0,,这种面向对象的编程方法意味着我们让对象控制一切
Dialogue: 0,0:05:07.05,0:05:08.08,en - 白色,,0,0,0,,We tell the object,
Dialogue: 0,0:05:07.05,0:05:08.08,zh - 黄色,,0,0,0,,我们告诉对象
Dialogue: 0,0:05:08.55,0:05:13.41,en - 白色,,0,0,0,,your job is to not only do all of these tasks, but also to track the size for me.
Dialogue: 0,0:05:08.55,0:05:13.41,zh - 黄色,,0,0,0,,你不仅要完成所有这些任务，还要帮我追踪 size
Dialogue: 0,0:05:13.76,0:05:16.58,en - 白色,,0,0,0,,And in that way, it's just the natural way to organize our code.
Dialogue: 0,0:05:13.76,0:05:16.58,zh - 黄色,,0,0,0,,这就是组织我们代码的自然方式
Dialogue: 0,0:05:16.96,0:05:20.25,en - 白色,,0,0,0,,So again, the int list can do all the stuff than an SLList can do.
Dialogue: 0,0:05:16.96,0:05:20.25,zh - 黄色,,0,0,0,,同样，IntList 可以做而 SLList 不能做的所有事情
Dialogue: 0,0:05:20.48,0:05:24.59,en - 白色,,0,0,0,,But an SLList is going to be a more natural approach in nearly every way.
Dialogue: 0,0:05:20.48,0:05:24.59,zh - 黄色,,0,0,0,,在 SLList 中几乎都有更自然的解决方式
Dialogue: 0,0:05:21.59,0:05:24.59,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
