[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 3-2 Primitive Types.mp4
Video File: 3-2 Primitive Types.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Active Line: 264

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 备注 - 侧边,微软雅黑,46,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,0,7,36,23,32,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 片头 - 集数,微软雅黑,116,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 绿色,微软雅黑,40,&H00FCFCFC,&H000000FF,&H00275F34,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 绿色 - 背景,微软雅黑,66,&H00275F34,&H000000FF,&H00275F34,&H004848C5,0,0,0,0,100,125,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 红色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00614B86,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 红色 - 背景,微软雅黑,45,&H00614B86,&H00614B86,&H00614B86,&H004848C5,-1,0,0,0,103,110,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 左下蓝色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00584408,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 左下蓝色 - 背景,微软雅黑,70,&H00584408,&H00614B86,&H00584408,&H004848C5,0,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 中间浅蓝,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00C98E36,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 中间浅蓝 - 背景,微软雅黑,40,&H00D9C2A5,&H00614B86,&H00D9C2A5,&H004848C5,0,0,0,0,118,117,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 右上 - 深绿,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00566B0A,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 右上 - 深绿 - 背景,微软雅黑,50,&H00566B0A,&H00614B86,&H00566B0A,&H004848C5,0,0,0,0,100,172,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 右下深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H000E0645,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 右下深红 - 背景,微软雅黑,40,&H000E0645,&H00614B86,&H000E0645,&H004848C5,0,0,0,0,106,148,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左上亮红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00484BF1,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左上亮红 - 背景,微软雅黑,40,&H00484BF1,&H00614B86,&H00484BF1,&H004848C5,0,0,0,0,120,120,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左下灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H002E2A28,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左下灰色 - 背景,微软雅黑,40,&H002E2A28,&H00614B86,&H002E2A28,&H004848C5,0,0,0,0,111,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 中下深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00050D55,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 中下深红 - 背景,微软雅黑,40,&H00050D55,&H00614B86,&H00050D55,&H004848C5,0,0,0,0,100,108,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右上橙色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H000575E0,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右上橙色 - 背景,微软雅黑,40,&H000575E0,&H00614B86,&H000575E0,&H004848C5,0,0,0,0,120,140,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右下灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00B3B3B3,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右下灰色 - 背景,微软雅黑,40,&H00B3B3B3,&H00614B86,&H00B3B3B3,&H004848C5,0,0,0,0,140,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左上蓝色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00AD7141,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左上蓝色 - Copy,微软雅黑,40,&H00AD7141,&H00614B86,&H00AD7141,&H004848C5,0,0,0,0,150,120,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左中深色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H002D2B2B,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左中深色 - Copy,微软雅黑,40,&H002D2B2B,&H00614B86,&H002D2B2B,&H004848C5,0,0,0,0,100,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右上深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00000563,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右上深红 - Copy,微软雅黑,40,&H00000563,&H00614B86,&H00000563,&H004848C5,0,0,0,0,105,119,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右下橙色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H001065BC,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右下橙色 - Copy,微软雅黑,40,&H00377DC1,&H00614B86,&H00377DC1,&H004848C5,0,0,0,0,120,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右中灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00273D54,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右中灰色 - Copy,微软雅黑,40,&H00273D54,&H00614B86,&H00273D54,&H004848C5,0,0,0,0,104,109,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左 - 下,微软雅黑,40,&H00FCFCFC,&H00614B86,&H001F2BA0,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左 - 下 - Copy,微软雅黑,40,&H001F2BA0,&H00614B86,&H001F2BA0,&H004848C5,0,0,0,0,112,114,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左 - 上,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00FCCB58,&H004848C5,-1,0,0,0,100,100,1,0,1,0,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左 - 上 - 背景,微软雅黑,75,&H00FCCB58,&H00614B86,&H00FCCB58,&H004848C5,0,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H002E3E1C,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 中 - 背景,微软雅黑,40,&H002E3E1C,&H00614B86,&H002E3E1C,&H004848C5,-1,0,0,0,120,188,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H009A32EF,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左中 - 背景,微软雅黑,40,&H009A32EF,&H00614B86,&H009A32EF,&H004848C5,-1,0,0,0,120,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左下,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00846D08,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左下 - 背景,微软雅黑,45,&H00846D08,&H00614B86,&H00846D08,&H004848C5,-1,0,0,0,100,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00067EB6,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右中 - Copy,微软雅黑,80,&H00067EB6,&H00614B86,&H00067EB6,&H004848C5,-1,0,0,0,165,114,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右下,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00965F09,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右下 - Copy,微软雅黑,80,&H00965F09,&H00614B86,&H00965F09,&H004848C5,-1,0,0,0,195,114,1,0,3,3,0,2,3,3,14,1
Style: 备注 - 中间,微软雅黑,46,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,8,36,23,32,1
Style: 备注 - 主题,微软雅黑,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,1,7,36,23,158,1
Style: 这一集的名字,微软雅黑,68,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,36,43,40,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:01.07,0:00:04.22,en - 白色,,0,0,0,,I like to call this little puzzle here the mystery of the walrus.
Dialogue: 0,0:00:01.07,0:00:04.22,zh - 黄色,,0,0,0,,我喜欢把这个小谜题叫做“海象之谜”
Dialogue: 0,0:00:04.92,0:00:11.28,en - 白色,,0,0,0,,So we now know the answer to the mystery of the walrus, that is why the walrus behaves one way and integers behave another.
Dialogue: 0,0:00:04.92,0:00:11.28,zh - 黄色,,0,0,0,,我们已经知道了海象之谜的答案，海象和整型的行为方式不同
Dialogue: 0,0:00:12.40,0:00:13.93,en - 白色,,0,0,0,,But we want to understand really why.
Dialogue: 0,0:00:12.40,0:00:13.93,zh - 黄色,,0,0,0,,我们要了解真正的原因
Dialogue: 0,0:00:14.33,0:00:18.68,en - 白色,,0,0,0,,And so to get to that, I'm going to explain a little bit about how computers work under the hood.
Dialogue: 0,0:00:14.33,0:00:18.68,zh - 黄色,,0,0,0,,为此，我要稍微解释一下计算机底层工作原理
Dialogue: 0,0:00:19.32,0:00:21.41,en - 白色,,0,0,0,,Now, this is a little bit of a fib, be warned.
Dialogue: 0,0:00:19.32,0:00:21.41,zh - 黄色,,0,0,0,,请注意，我要讲的不是很严谨
Dialogue: 0,0:00:21.41,0:00:24.02,en - 白色,,0,0,0,,And in the book, I lay out a little more of an honest story.
Dialogue: 0,0:00:21.41,0:00:24.02,zh - 黄色,,0,0,0,,书中描述得更真实
Dialogue: 0,0:00:24.02,0:00:25.95,en - 白色,,0,0,0,,But for our purposes, this is basically true.
Dialogue: 0,0:00:24.02,0:00:25.95,zh - 黄色,,0,0,0,,但目前对于我们而言，这基本是正确的
Dialogue: 0,0:00:26.42,0:00:29.80,en - 白色,,0,0,0,,So anything you want to store on a computer is stored in so-called memory.
Dialogue: 0,0:00:26.42,0:00:29.80,zh - 黄色,,0,0,0,,你想放到计算机中的任何东西都存储在所谓的内存中
Dialogue: 0,0:00:30.56,0:00:33.95,en - 白色,,0,0,0,,And that memory, whatever it is-- I mean, is it an arrangement of atoms?
Dialogue: 0,0:00:30.56,0:00:33.95,zh - 黄色,,0,0,0,,这个内存不用管它是什么，它是原子的排列？
Dialogue: 0,0:00:33.95,0:00:37.67,en - 白色,,0,0,0,,Is it like crystals that have been imbued with the power of the gods?
Dialogue: 0,0:00:33.95,0:00:37.67,zh - 黄色,,0,0,0,,或者是充斥着神力的水晶？
Dialogue: 0,0:00:37.67,0:00:38.33,en - 白色,,0,0,0,,Who knows?
Dialogue: 0,0:00:37.67,0:00:38.33,zh - 黄色,,0,0,0,,谁知道呢？
Dialogue: 0,0:00:39.00,0:00:43.57,en - 白色,,0,0,0,,But whatever it is, ultimately that memory is--
Dialogue: 0,0:00:39.00,0:00:43.57,zh - 黄色,,0,0,0,,但不管它是什么，基本上内存是
Dialogue: 0,0:00:44.21,0:00:47.73,en - 白色,,0,0,0,,all information is encoded as a sequence of 1's and 0's.
Dialogue: 0,0:00:44.21,0:00:47.73,zh - 黄色,,0,0,0,,编码为1和0的信息序列
Dialogue: 0,0:00:48.54,0:00:49.66,en - 白色,,0,0,0,,So some examples.
Dialogue: 0,0:00:48.54,0:00:49.66,zh - 黄色,,0,0,0,,举几个例子
Dialogue: 0,0:00:50.72,0:00:57.51,en - 白色,,0,0,0,,In a computer, the number 72 is usually stored as 01001000.
Dialogue: 0,0:00:50.72,0:00:57.51,zh - 黄色,,0,0,0,,在计算机中，数字72通常存储为01001000
Dialogue: 0,0:00:58.06,0:01:07.77,en - 白色,,0,0,0,,Or as another example, the number 205.75 is often stored as 01000011, et cetera, with 32 more 0's up here.
Dialogue: 0,0:00:58.06,0:01:07.77,zh - 黄色,,0,0,0,,数字205.75通常存储为01000011...还有32个0
Dialogue: 0,0:01:10.23,0:01:15.56,en - 白色,,0,0,0,,The letter H, for example, it's often stored as 01001000.
Dialogue: 0,0:01:10.23,0:01:15.56,zh - 黄色,,0,0,0,,例如字母 H 通常存储为01001000
Dialogue: 0,0:01:15.56,0:01:20.04,en - 白色,,0,0,0,,And you'll notice that's actually the same as the number 72, they have the same encoding.
Dialogue: 0,0:01:15.56,0:01:20.04,zh - 黄色,,0,0,0,,这实际上和数字72是一样的，它们有相同的编码
Dialogue: 0,0:01:21.08,0:01:25.17,en - 白色,,0,0,0,,And the computer knows how to interpret those bits based on the particular context.
Dialogue: 0,0:01:21.08,0:01:25.17,zh - 黄色,,0,0,0,,计算机知道如何基于特定的上下文来解释这些比特
Dialogue: 0,0:01:26.35,0:01:31.46,en - 白色,,0,0,0,,And as a last example, the value "true" is often stored as a bunch of 0's followed by 1.
Dialogue: 0,0:01:26.35,0:01:31.46,zh - 黄色,,0,0,0,,最后一个例子，“true”通常存储为一串0后跟一个1
Dialogue: 0,0:01:32.08,0:01:36.09,en - 白色,,0,0,0,,Now, it's not always the case that "true" is always stored this way or 72 is always stored this way.
Dialogue: 0,0:01:32.08,0:01:36.09,zh - 黄色,,0,0,0,,“true”或者72并不总是以上述方式存储
Dialogue: 0,0:01:36.09,0:01:37.88,en - 白色,,0,0,0,,But these are the most typical representations.
Dialogue: 0,0:01:36.09,0:01:37.88,zh - 黄色,,0,0,0,,但基本是这样
Dialogue: 0,0:01:39.44,0:01:41.55,en - 白色,,0,0,0,,And so if you're really curious about this stuff,
Dialogue: 0,0:01:39.44,0:01:41.55,zh - 黄色,,0,0,0,,如果你真的对这些东西很好奇
Dialogue: 0,0:01:41.55,0:01:44.42,en - 白色,,0,0,0,,this class isn't really going to dig deep into representations.
Dialogue: 0,0:01:41.55,0:01:44.42,zh - 黄色,,0,0,0,,这节课不会深入介绍
Dialogue: 0,0:01:44.42,0:01:47.53,en - 白色,,0,0,0,,But suffice it to say that given anything that you can name,
Dialogue: 0,0:01:44.42,0:01:47.53,zh - 黄色,,0,0,0,,能说出你命名的东西就行了
Dialogue: 0,0:01:47.71,0:01:51.57,en - 白色,,0,0,0,,you can certainly come up with some sequence of 1's and 0's and say it refers to that thing.
Dialogue: 0,0:01:47.71,0:01:51.57,zh - 黄色,,0,0,0,,你可以想出一些1和0的序列，然后说它指的是某个东西
Dialogue: 0,0:01:53.26,0:01:54.80,en - 白色,,0,0,0,,So each Java type--
Dialogue: 0,0:01:53.26,0:01:54.80,zh - 黄色,,0,0,0,,每种Java类型...
Dialogue: 0,0:01:55.76,0:01:57.41,en - 白色,,0,0,0,,so when you have a Java variable,
Dialogue: 0,0:01:55.76,0:01:57.41,zh - 黄色,,0,0,0,,当你有一个 Java 变量时
Dialogue: 0,0:01:57.41,0:02:01.11,en - 白色,,0,0,0,,even though the letter H and the number 72 have separate representations,
Dialogue: 0,0:01:57.41,0:02:01.11,zh - 黄色,,0,0,0,,即使字母 H 和数字72具有不同的表示
Dialogue: 0,0:02:01.62,0:02:04.31,en - 白色,,0,0,0,,the type tells the Java interpreter how to interpret it.
Dialogue: 0,0:02:01.62,0:02:04.31,zh - 黄色,,0,0,0,,类型系统告诉 Java 解释器如何解释它
Dialogue: 0,0:02:04.98,0:02:07.15,en - 白色,,0,0,0,,So if I have a variable that's of type character,
Dialogue: 0,0:02:04.98,0:02:07.15,zh - 黄色,,0,0,0,,假设我有一个字符类型的变量
Dialogue: 0,0:02:07.15,0:02:08.78,en - 白色,,0,0,0,,then when it sees the sequence of bits,
Dialogue: 0,0:02:07.15,0:02:08.78,zh - 黄色,,0,0,0,,然后观察它的比特序列
Dialogue: 0,0:02:08.78,0:02:10.65,en - 白色,,0,0,0,,it's going to be thinking about the letter H.
Dialogue: 0,0:02:08.78,0:02:10.65,zh - 黄色,,0,0,0,,会想到字母 H
Dialogue: 0,0:02:10.65,0:02:12.20,en - 白色,,0,0,0,,But if I have an integer variable,
Dialogue: 0,0:02:10.65,0:02:12.20,zh - 黄色,,0,0,0,,但是假设我有一个整型变量
Dialogue: 0,0:02:12.20,0:02:14.17,en - 白色,,0,0,0,,it will know to treat it as the number 72.
Dialogue: 0,0:02:12.20,0:02:14.17,zh - 黄色,,0,0,0,,它将被其视为数字72
Dialogue: 0,0:02:14.84,0:02:17.60,en - 白色,,0,0,0,,So it turns out that in Java, there's eight primitive types.
Dialogue: 0,0:02:14.84,0:02:17.60,zh - 黄色,,0,0,0,,在 Java 中有8种基本类型
Dialogue: 0,0:02:17.77,0:02:21.29,en - 白色,,0,0,0,,There's byte, short, int, long, float, double, boolean, and char.
Dialogue: 0,0:02:17.77,0:02:21.29,zh - 黄色,,0,0,0,,byte、short、int、long、float、double、boolean 和 char
Dialogue: 0,0:02:21.29,0:02:25.02,en - 白色,,0,0,0,,And we're not going to spend a ton of time talking about each of these types.
Dialogue: 0,0:02:21.29,0:02:25.02,zh - 黄色,,0,0,0,,我们不会花太多时间一一讨论
Dialogue: 0,0:02:25.41,0:02:27.57,en - 白色,,0,0,0,,But be aware these are the eight primitive types.
Dialogue: 0,0:02:25.41,0:02:27.57,zh - 黄色,,0,0,0,,但请注意这8种基本类型
Dialogue: 0,0:02:29.09,0:02:35.06,en - 白色,,0,0,0,,And so again, as I alluded, we're not going to say why is 205.75 equal to this sequence of bits.
Dialogue: 0,0:02:29.09,0:02:35.06,zh - 黄色,,0,0,0,,再说一次，我们不会讲为什么205.75等于这个比特序列
Dialogue: 0,0:02:35.06,0:02:38.11,en - 白色,,0,0,0,,That's actually a class that follows this one called 61C.
Dialogue: 0,0:02:35.06,0:02:38.11,zh - 黄色,,0,0,0,,这实际上在后面 61C 的课程中会讲到
Dialogue: 0,0:02:38.60,0:02:40.38,en - 白色,,0,0,0,,But if you're curious, you can go reading.
Dialogue: 0,0:02:38.60,0:02:40.38,zh - 黄色,,0,0,0,,但是如果你好奇，可以去看看书
Dialogue: 0,0:02:40.38,0:02:42.93,en - 白色,,0,0,0,,And the book give some links if you want to get ahead of the game.
Dialogue: 0,0:02:40.38,0:02:42.93,zh - 黄色,,0,0,0,,书会给你一些链接，让你抢占先机
Dialogue: 0,0:02:43.50,0:02:45.80,en - 白色,,0,0,0,,But in this course, all I really care about right now,
Dialogue: 0,0:02:43.50,0:02:45.80,zh - 黄色,,0,0,0,,但在这门课上，我现在真正关心的是
Dialogue: 0,0:02:45.80,0:02:49.60,en - 白色,,0,0,0,,I want to understand why does the mystery of the walrus resolve in the way it does?
Dialogue: 0,0:02:45.80,0:02:49.60,zh - 黄色,,0,0,0,,为什么海象之谜会以这种方式解开？
Dialogue: 0,0:02:49.60,0:02:53.31,en - 白色,,0,0,0,,And this is a piece of information that I think is really useful to us in understanding that.
Dialogue: 0,0:02:49.60,0:02:53.31,zh - 黄色,,0,0,0,,这条信息对我们理解很有用
Dialogue: 0,0:02:54.92,0:02:57.33,en - 白色,,0,0,0,,So what we're going to do is
Dialogue: 0,0:02:54.92,0:02:57.33,zh - 黄色,,0,0,0,,所以我们要做的是
Dialogue: 0,0:02:57.46,0:03:05.67,en - 白色,,0,0,0,,let's use this simple model of declaring a variable and combine that with our knowledge of bits
Dialogue: 0,0:02:57.46,0:03:05.67,zh - 黄色,,0,0,0,,将声明变量的简单模型和比特知识相结合
Dialogue: 0,0:03:05.67,0:03:08.88,en - 白色,,0,0,0,,to really reinforce the fundamentals we'll need for the mystery of the walrus.
Dialogue: 0,0:03:05.67,0:03:08.88,zh - 黄色,,0,0,0,,来加强了解海象之谜的基础
Dialogue: 0,0:03:09.66,0:03:10.78,en - 白色,,0,0,0,,So here's some code.
Dialogue: 0,0:03:09.66,0:03:10.78,zh - 黄色,,0,0,0,,这里有一些代码
Dialogue: 0,0:03:10.78,0:03:12.00,en - 白色,,0,0,0,,I'm going to run it in a moment.
Dialogue: 0,0:03:10.78,0:03:12.00,zh - 黄色,,0,0,0,,一会运行它
Dialogue: 0,0:03:12.98,0:03:15.36,en - 白色,,0,0,0,,So when you declare a variable of a certain type in Java,
Dialogue: 0,0:03:12.98,0:03:15.36,zh - 黄色,,0,0,0,,当你在 Java 中声明某个类型的变量时
Dialogue: 0,0:03:15.36,0:03:22.40,en - 白色,,0,0,0,,say int x or double y, what happens is your computer's going to set aside exactly enough bits to hold a thing of that type.
Dialogue: 0,0:03:15.36,0:03:22.40,zh - 黄色,,0,0,0,,比方说 int x 或 double y，计算机会留出足够的位数来容纳这种类型的东西
Dialogue: 0,0:03:22.71,0:03:25.15,en - 白色,,0,0,0,,It's got some billions of bits that it can use.
Dialogue: 0,0:03:22.71,0:03:25.15,zh - 黄色,,0,0,0,,它有数十亿比特可以使用
Dialogue: 0,0:03:25.17,0:03:27.81,en - 白色,,0,0,0,,And it's going to say, these bits are going to get to be int x.
Dialogue: 0,0:03:25.17,0:03:27.81,zh - 黄色,,0,0,0,,它会安排：“这些位将会是 int x”
Dialogue: 0,0:03:27.81,0:03:29.55,en - 白色,,0,0,0,,These are going to get to be double y.
Dialogue: 0,0:03:27.81,0:03:29.55,zh - 黄色,,0,0,0,,“这些会变成 double y”
Dialogue: 0,0:03:30.30,0:03:33.31,en - 白色,,0,0,0,,So an int, as it turns out, is always 32 bits.
Dialogue: 0,0:03:30.30,0:03:33.31,zh - 黄色,,0,0,0,,int 始终是32位
Dialogue: 0,0:03:33.86,0:03:35.70,en - 白色,,0,0,0,,Even if you only are storing a small number,
Dialogue: 0,0:03:33.86,0:03:35.70,zh - 黄色,,0,0,0,,即使只存储了一小部分数据
Dialogue: 0,0:03:35.70,0:03:37.17,en - 白色,,0,0,0,,it still gives you 32 bits.
Dialogue: 0,0:03:35.70,0:03:37.17,zh - 黄色,,0,0,0,,计算机仍然提供32位
Dialogue: 0,0:03:37.98,0:03:40.35,en - 白色,,0,0,0,,Or if you declare a double, you get 64 bits.
Dialogue: 0,0:03:37.98,0:03:40.35,zh - 黄色,,0,0,0,,或者声明为双精度会得到64位
Dialogue: 0,0:03:40.35,0:03:41.24,en - 白色,,0,0,0,,That's just how it is.
Dialogue: 0,0:03:40.35,0:03:41.24,zh - 黄色,,0,0,0,,就是这样
Dialogue: 0,0:03:42.91,0:03:46.71,en - 白色,,0,0,0,,And so Java, what it will then do is it's going to create some kind of table that says,
Dialogue: 0,0:03:42.91,0:03:46.71,zh - 黄色,,0,0,0,,Java 会创建一张表，上面写着
Dialogue: 0,0:03:46.71,0:03:50.62,en - 白色,,0,0,0,,OK, anytime I see the symbol x, that means I'm referring to this piece of information.
Dialogue: 0,0:03:46.71,0:03:50.62,zh - 黄色,,0,0,0,,“每当我看到符号 x，就意味着指的是这条信息”
Dialogue: 0,0:03:51.45,0:03:54.37,en - 白色,,0,0,0,,And Java does not write anything in particular into those boxes.
Dialogue: 0,0:03:51.45,0:03:54.37,zh - 黄色,,0,0,0,,而且 Java 不会向分配好的盒子中写入任何内容
Dialogue: 0,0:03:54.93,0:03:57.09,en - 白色,,0,0,0,,So it's got this huge sequence of bits.
Dialogue: 0,0:03:54.93,0:03:57.09,zh - 黄色,,0,0,0,,它有一个巨大的比特序列
Dialogue: 0,0:03:57.09,0:03:58.26,en - 白色,,0,0,0,,It says, these get to be x.
Dialogue: 0,0:03:57.09,0:03:58.26,zh - 黄色,,0,0,0,,上面写着，这些应该是 x
Dialogue: 0,0:03:58.26,0:04:01.35,en - 白色,,0,0,0,,And it just records, OK, from now on when I see x, I mean this memory.
Dialogue: 0,0:03:58.26,0:04:01.35,zh - 黄色,,0,0,0,,它只记录，“从现在开始当我看到 x 时，指的是这块内存区”
Dialogue: 0,0:04:02.34,0:04:04.31,en - 白色,,0,0,0,,And so if I look at this visually,
Dialogue: 0,0:04:02.34,0:04:04.31,zh - 黄色,,0,0,0,,从视觉上看
Dialogue: 0,0:04:04.71,0:04:08.00,en - 白色,,0,0,0,,after running this int x, I get a block of 32 bits.
Dialogue: 0,0:04:04.71,0:04:08.00,zh - 黄色,,0,0,0,,运行 int x 后，我得到一个32位的区域
Dialogue: 0,0:04:08.24,0:04:11.08,en - 白色,,0,0,0,,And after running double y, I get this box of 64 bits.
Dialogue: 0,0:04:08.24,0:04:11.08,zh - 黄色,,0,0,0,,运行 double y 后，我得到了这个64位的盒子
Dialogue: 0,0:04:12.01,0:04:13.77,en - 白色,,0,0,0,,Now, note that I haven't put anything in here.
Dialogue: 0,0:04:12.01,0:04:13.77,zh - 黄色,,0,0,0,,注意此时我没有在这里放任何东西
Dialogue: 0,0:04:14.64,0:04:16.38,en - 白色,,0,0,0,,Now, there is something in there.
Dialogue: 0,0:04:14.64,0:04:16.38,zh - 黄色,,0,0,0,,其实里面本身存在一些东西
Dialogue: 0,0:04:16.38,0:04:22.90,en - 白色,,0,0,0,,I mean, because memory is just some physical object out there in the world, the memory will contain some sequence of 0's and 1's.
Dialogue: 0,0:04:16.38,0:04:22.90,zh - 黄色,,0,0,0,,内存会包含一些0和1的序列，因为它是自然界的物理对象
Dialogue: 0,0:04:22.90,0:04:26.11,en - 白色,,0,0,0,,But Java does not let you actually access the information that's laying around.
Dialogue: 0,0:04:22.90,0:04:26.11,zh - 黄色,,0,0,0,,但是 Java 实际上并不允许你访问
Dialogue: 0,0:04:26.43,0:04:30.17,en - 白色,,0,0,0,,It's sort of like if you pick up a piece of paper off your desk because you needed to scribble a quick note,
Dialogue: 0,0:04:26.43,0:04:30.17,zh - 黄色,,0,0,0,,这有点像你需要草草写个便条，所以从桌子上拿起一张纸
Dialogue: 0,0:04:30.45,0:04:32.25,en - 白色,,0,0,0,,there may already be something on there.
Dialogue: 0,0:04:30.45,0:04:32.25,zh - 黄色,,0,0,0,,纸上可能已经有东西了
Dialogue: 0,0:04:32.25,0:04:33.78,en - 白色,,0,0,0,,But you usually don't care about it, right,
Dialogue: 0,0:04:32.25,0:04:33.78,zh - 黄色,,0,0,0,,但你通常并不在意
Dialogue: 0,0:04:33.78,0:04:37.08,en - 白色,,0,0,0,,because you just want to write down a phone number someone's telling you or whatever.
Dialogue: 0,0:04:33.78,0:04:37.08,zh - 黄色,,0,0,0,,因为你只想写下别人告诉你的电话号码
Dialogue: 0,0:04:37.56,0:04:39.54,en - 白色,,0,0,0,,So there might already be something there,
Dialogue: 0,0:04:37.56,0:04:39.54,zh - 黄色,,0,0,0,,所以内存中可能已经有东西了
Dialogue: 0,0:04:39.54,0:04:41.67,en - 白色,,0,0,0,,but Java will not let you see what's already there.
Dialogue: 0,0:04:39.54,0:04:41.67,zh - 黄色,,0,0,0,,但是 Java 不会让你看到已经存在的内容
Dialogue: 0,0:04:41.67,0:04:43.50,en - 白色,,0,0,0,,There's just no way to see that information.
Dialogue: 0,0:04:41.67,0:04:43.50,zh - 黄色,,0,0,0,,就是没办法看到这些信息
Dialogue: 0,0:04:43.50,0:04:47.88,en - 白色,,0,0,0,,So in this case, what I'm saying is that Java doesn't let you access a variable that's uninitialized.
Dialogue: 0,0:04:43.50,0:04:47.88,zh - 黄色,,0,0,0,,Java 不允许访问未初始化的变量
Dialogue: 0,0:04:48.21,0:04:52.00,en - 白色,,0,0,0,,So if I tried to print x or y at this point, it would say no, not allowed.
Dialogue: 0,0:04:48.21,0:04:52.00,zh - 黄色,,0,0,0,,所以这时尝试打印 x 或 y，都不会被允许
Dialogue: 0,0:04:53.20,0:04:54.35,en - 白色,,0,0,0,,So that's declaration.
Dialogue: 0,0:04:53.20,0:04:54.35,zh - 黄色,,0,0,0,,这就是声明
Dialogue: 0,0:04:55.05,0:04:57.06,en - 白色,,0,0,0,,So now let's talk a little bit about assignment.
Dialogue: 0,0:04:55.05,0:04:57.06,zh - 黄色,,0,0,0,,再来谈谈赋值
Dialogue: 0,0:04:57.90,0:05:01.57,en - 白色,,0,0,0,,So whenever I say x equals some big number like this,
Dialogue: 0,0:04:57.90,0:05:01.57,zh - 黄色,,0,0,0,,每当我说 x 等于一个像这样的大数字时
Dialogue: 0,0:05:01.75,0:05:05.60,en - 白色,,0,0,0,,what Java will do is then fill it with all the bits that correspond to this number.
Dialogue: 0,0:05:01.75,0:05:05.60,zh - 黄色,,0,0,0,,Java 就会用与该数字相对应的所有位来填充它
Dialogue: 0,0:05:05.85,0:05:11.24,en - 白色,,0,0,0,,And it turns out that the 32 bits that correspond to this negative number here is this sequence of bits.
Dialogue: 0,0:05:05.85,0:05:11.24,zh - 黄色,,0,0,0,,与这个负数相对应的32位就是这个比特序列
Dialogue: 0,0:05:12.03,0:05:13.77,en - 白色,,0,0,0,,And when I say y equals this right here, well,
Dialogue: 0,0:05:12.03,0:05:13.77,zh - 黄色,,0,0,0,,当执行 y 等于这里的时候
Dialogue: 0,0:05:14.31,0:05:18.60,en - 白色,,0,0,0,,what it will do is fill that with the 64 bits that represent this particular number.
Dialogue: 0,0:05:14.31,0:05:18.60,zh - 黄色,,0,0,0,,代表这个数字的64位比特序列填充它
Dialogue: 0,0:05:19.41,0:05:23.40,en - 白色,,0,0,0,,And of course, there's some code under the hood that knows exactly how all this works.
Dialogue: 0,0:05:19.41,0:05:23.40,zh - 黄色,,0,0,0,,底层代码确切地知道这一切是如何工作的
Dialogue: 0,0:05:23.40,0:05:28.15,en - 白色,,0,0,0,,There is a whole stack of interesting abstractions that go down to the hardware level.
Dialogue: 0,0:05:23.40,0:05:28.15,zh - 黄色,,0,0,0,,有一大堆深入到硬件级别的有趣的抽象
Dialogue: 0,0:05:28.15,0:05:30.97,en - 白色,,0,0,0,,And that's really 61C's purview, to say just how these bits happen.
Dialogue: 0,0:05:28.15,0:05:30.97,zh - 黄色,,0,0,0,,61C 会说明这些比特是如何工作的
Dialogue: 0,0:05:31.38,0:05:35.06,en - 白色,,0,0,0,,But for our purposes to understand the mystery of the walrus, this is what you should know.
Dialogue: 0,0:05:31.38,0:05:35.06,zh - 黄色,,0,0,0,,但这里只是为了理解海象之谜
Dialogue: 0,0:05:35.34,0:05:36.46,en - 白色,,0,0,0,,We get two boxes.
Dialogue: 0,0:05:35.34,0:05:36.46,zh - 黄色,,0,0,0,,我们有两个盒子
Dialogue: 0,0:05:36.81,0:05:38.32,en - 白色,,0,0,0,,Then they get filled up with bits.
Dialogue: 0,0:05:36.81,0:05:38.32,zh - 黄色,,0,0,0,,它们被比特填满
Dialogue: 0,0:05:39.20,0:05:39.84,en - 白色,,0,0,0,,So what?
Dialogue: 0,0:05:39.20,0:05:39.84,zh - 黄色,,0,0,0,,然后呢？
Dialogue: 0,0:05:41.67,0:05:42.73,en - 白色,,0,0,0,,Well, we're getting there.
Dialogue: 0,0:05:41.67,0:05:42.73,zh - 黄色,,0,0,0,,马上就知道了
Dialogue: 0,0:05:43.84,0:05:48.41,en - 白色,,0,0,0,,But before we get deeper, I want to introduce a little simpler notation.
Dialogue: 0,0:05:43.84,0:05:48.41,zh - 黄色,,0,0,0,,但在深入之前，我想介绍一个更简单的符号
Dialogue: 0,0:05:48.41,0:05:52.83,en - 白色,,0,0,0,,So whenever you look at this, this is probably if nothing else a little intimidating, right?
Dialogue: 0,0:05:48.41,0:05:52.83,zh - 黄色,,0,0,0,,这个可能是有点吓人对吧？
Dialogue: 0,0:05:52.83,0:05:54.51,en - 白色,,0,0,0,,This is just some giant long sequence of bits.
Dialogue: 0,0:05:52.83,0:05:54.51,zh - 黄色,,0,0,0,,一个超长的比特序列
Dialogue: 0,0:05:55.18,0:05:57.36,en - 白色,,0,0,0,,So this box notation that I have introduced,
Dialogue: 0,0:05:55.18,0:05:57.36,zh - 黄色,,0,0,0,,所以我要介绍盒子符号
Dialogue: 0,0:05:57.36,0:06:01.97,en - 白色,,0,0,0,,I'm now going to make it even simpler and call it simplified box notation.
Dialogue: 0,0:05:57.36,0:06:01.97,zh - 黄色,,0,0,0,,用以简化表示它，我称之为简化盒子表示法
Dialogue: 0,0:06:02.33,0:06:06.40,en - 白色,,0,0,0,,And in this notation, what we're going to do is instead of writing out the memory box contents in binary,
Dialogue: 0,0:06:02.33,0:06:06.40,zh - 黄色,,0,0,0,,在这个表示法中，不使用二进制表示盒子的内容
Dialogue: 0,0:06:06.40,0:06:11.94,en - 白色,,0,0,0,,because I can't read that, you can't read that, we're just going to write out the value in human-readable symbols.
Dialogue: 0,0:06:06.40,0:06:11.94,zh - 黄色,,0,0,0,,因为难以阅读，我们要把值写成人类易读的符号
Dialogue: 0,0:06:11.94,0:06:14.46,en - 白色,,0,0,0,,So when I say x equals this, I will just fill the box.
Dialogue: 0,0:06:11.94,0:06:14.46,zh - 黄色,,0,0,0,,所以当我说 x 等于这个的时候，这样填满盒子
Dialogue: 0,0:06:14.94,0:06:16.32,en - 白色,,0,0,0,,That's going to be our notation.
Dialogue: 0,0:06:14.94,0:06:16.32,zh - 黄色,,0,0,0,,这是我们的记号
Dialogue: 0,0:06:16.32,0:06:19.80,en - 白色,,0,0,0,,And it happens to be consistent with the Java visualizer we use in this class.
Dialogue: 0,0:06:16.32,0:06:19.80,zh - 黄色,,0,0,0,,这恰好与 Java visualizer 中一致
Dialogue: 0,0:06:22.56,0:06:28.28,en - 白色,,0,0,0,,So now that we know about bits, I'm now really to tell you why the mystery of the walrus resolves the way it does.
Dialogue: 0,0:06:22.56,0:06:28.28,zh - 黄色,,0,0,0,,我们已经了解了比特，现在我要告诉你海象之谜究竟怎样解开
Dialogue: 0,0:06:28.28,0:06:31.68,en - 白色,,0,0,0,,And that's because it follows what I'm going to call the golden rule of equals.
Dialogue: 0,0:06:28.28,0:06:31.68,zh - 黄色,,0,0,0,,它遵循的是我称之为等号的黄金法则
Dialogue: 0,0:06:33.07,0:06:36.99,en - 白色,,0,0,0,,So given two variables, y and x, when I say y equals x,
Dialogue: 0,0:06:33.07,0:06:36.99,zh - 黄色,,0,0,0,,假设有两个变量 y 和 x，当 y = x 时
Dialogue: 0,0:06:36.99,0:06:39.80,en - 白色,,0,0,0,,I'm just taking all the bits in x and copying them into y.
Dialogue: 0,0:06:36.99,0:06:39.80,zh - 黄色,,0,0,0,,只是把 x 中的所有位复制到 y 中
Dialogue: 0,0:06:41.03,0:06:45.82,en - 白色,,0,0,0,,So let's look at this in action, now keeping in mind our picture of simplified box notation.
Dialogue: 0,0:06:41.03,0:06:45.82,zh - 黄色,,0,0,0,,让我们来看一下实际操作，记住我们的简化盒子表示法
Dialogue: 0,0:06:46.63,0:06:51.00,en - 白色,,0,0,0,,So when I say int x equals 5, I get a box that contains the number 5.
Dialogue: 0,0:06:46.63,0:06:51.00,zh - 黄色,,0,0,0,,执行 int x = 5 时，得到一个包含数字5的盒子
Dialogue: 0,0:06:51.43,0:06:53.64,en - 白色,,0,0,0,,And when I do int y, I get a box-- not pictured here,
Dialogue: 0,0:06:51.43,0:06:53.64,zh - 黄色,,0,0,0,,执行 int y 时，得到一个盒子，但没有图形
Dialogue: 0,0:06:53.64,0:06:55.60,en - 白色,,0,0,0,,because the visualizer chooses not to do so.
Dialogue: 0,0:06:53.64,0:06:55.60,zh - 黄色,,0,0,0,,因为可视化工具选择不生成图形
Dialogue: 0,0:06:56.45,0:07:00.97,en - 白色,,0,0,0,,And so when I say y equals x, it's just going to copy those bits that are in x and the y.
Dialogue: 0,0:06:56.45,0:07:00.97,zh - 黄色,,0,0,0,,当执行 y = x 时，它只会将 x 中的位复制到 y
Dialogue: 0,0:07:00.97,0:07:01.68,en - 白色,,0,0,0,,So there they go.
Dialogue: 0,0:07:00.97,0:07:01.68,zh - 黄色,,0,0,0,,就像这样
Dialogue: 0,0:07:01.68,0:07:02.73,en - 白色,,0,0,0,,They're in the box.
Dialogue: 0,0:07:01.68,0:07:02.73,zh - 黄色,,0,0,0,,它们在盒子里
Dialogue: 0,0:07:03.64,0:07:05.35,en - 白色,,0,0,0,,And now if I say x equals 2,
Dialogue: 0,0:07:03.64,0:07:05.35,zh - 黄色,,0,0,0,,现在执行 x = 2
Dialogue: 0,0:07:05.86,0:07:10.80,en - 白色,,0,0,0,,remember what the golden rule of equals does is it says it takes these bits and puts them in this box.
Dialogue: 0,0:07:05.86,0:07:10.80,zh - 黄色,,0,0,0,,依据等号的黄金法则，它会把这些位放进这个盒子里
Dialogue: 0,0:07:11.07,0:07:12.03,en - 白色,,0,0,0,,So what are these bits?
Dialogue: 0,0:07:11.07,0:07:12.03,zh - 黄色,,0,0,0,,这些位是什么呢？
Dialogue: 0,0:07:12.03,0:07:12.82,en - 白色,,0,0,0,,It's the number 2.
Dialogue: 0,0:07:12.03,0:07:12.82,zh - 黄色,,0,0,0,,是数字2
Dialogue: 0,0:07:12.82,0:07:14.07,en - 白色,,0,0,0,,And it puts them in which box?
Dialogue: 0,0:07:12.82,0:07:14.07,zh - 黄色,,0,0,0,,它们会被放在哪个盒子里？
Dialogue: 0,0:07:14.07,0:07:14.66,en - 白色,,0,0,0,,This box.
Dialogue: 0,0:07:14.07,0:07:14.66,zh - 黄色,,0,0,0,,这个盒子
Dialogue: 0,0:07:14.94,0:07:18.75,en - 白色,,0,0,0,,So there's no change to y, because that's not what the golden rule of equals says.
Dialogue: 0,0:07:14.94,0:07:18.75,zh - 黄色,,0,0,0,,所以 y 没有变化，因为等号的黄金法则不是这样
Dialogue: 0,0:07:18.75,0:07:21.31,en - 白色,,0,0,0,,It says, take this box and fill it with bits.
Dialogue: 0,0:07:18.75,0:07:21.31,zh - 黄色,,0,0,0,,将这个盒子装满比特
Dialogue: 0,0:07:21.67,0:07:23.35,en - 白色,,0,0,0,,Not this box. There's two distinct boxes.
Dialogue: 0,0:07:21.67,0:07:23.35,zh - 黄色,,0,0,0,,不是这个盒子，这两个盒子截然不同
Dialogue: 0,0:07:23.35,0:07:24.17,en - 白色,,0,0,0,,Fill this one up.
Dialogue: 0,0:07:23.35,0:07:24.17,zh - 黄色,,0,0,0,,把这个装满
Dialogue: 0,0:07:25.42,0:07:28.71,en - 白色,,0,0,0,,And that's the answer to why integers behave the way they do.
Dialogue: 0,0:07:25.42,0:07:28.71,zh - 黄色,,0,0,0,,这就是整型行为方式的答案
Dialogue: 0,0:07:29.88,0:07:32.61,en - 白色,,0,0,0,,So the natural follow-up question is, well, what about walruses?
Dialogue: 0,0:07:29.88,0:07:32.61,zh - 黄色,,0,0,0,,那么接下来的问题，海象呢？
Dialogue: 0,0:07:32.45,0:07:35.45,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:07:32.61,0:07:35.45,en - 白色,,0,0,0,,And we'll get there in a moment.
Dialogue: 0,0:07:32.61,0:07:35.45,zh - 黄色,,0,0,0,,马上揭晓
