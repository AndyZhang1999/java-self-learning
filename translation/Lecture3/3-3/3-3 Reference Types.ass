[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Audio File: 3-3 Reference Types.mp4
Video File: 3-3 Reference Types.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.500000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 备注 - 侧边,微软雅黑,46,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,0,7,36,23,32,1
Style: zh - 黄色,微软雅黑,60,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: en - 白色,Yu Gothic UI,45,&H00FFFFFF,&H000000FF,&H55000000,&H63000000,-1,0,0,0,100,100,0,0,1,4,0,2,3,3,16,1
Style: 翻译人员专属 - 左下角,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,1,42,32,42,1
Style: 片头 - 集数,微软雅黑,116,&H0080FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 绿色,微软雅黑,40,&H00FCFCFC,&H000000FF,&H00275F34,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 绿色 - 背景,微软雅黑,66,&H00275F34,&H000000FF,&H00275F34,&H004848C5,0,0,0,0,100,125,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 红色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00614B86,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 红色 - 背景,微软雅黑,45,&H00614B86,&H00614B86,&H00614B86,&H004848C5,-1,0,0,0,103,110,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 左下蓝色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00584408,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 左下蓝色 - 背景,微软雅黑,70,&H00584408,&H00614B86,&H00584408,&H004848C5,0,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 中间浅蓝,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00C98E36,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 中间浅蓝 - 背景,微软雅黑,40,&H00D9C2A5,&H00614B86,&H00D9C2A5,&H004848C5,0,0,0,0,118,117,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 右上 - 深绿,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00566B0A,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 右上 - 深绿 - 背景,微软雅黑,50,&H00566B0A,&H00614B86,&H00566B0A,&H004848C5,0,0,0,0,100,172,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 右下深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H000E0645,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 右下深红 - 背景,微软雅黑,40,&H000E0645,&H00614B86,&H000E0645,&H004848C5,0,0,0,0,106,148,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左上亮红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00484BF1,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左上亮红 - 背景,微软雅黑,40,&H00484BF1,&H00614B86,&H00484BF1,&H004848C5,0,0,0,0,120,120,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左下灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H002E2A28,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 左下灰色 - 背景,微软雅黑,40,&H002E2A28,&H00614B86,&H002E2A28,&H004848C5,0,0,0,0,111,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 中下深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00050D55,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 中下深红 - 背景,微软雅黑,40,&H00050D55,&H00614B86,&H00050D55,&H004848C5,0,0,0,0,100,108,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右上橙色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H000575E0,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右上橙色 - 背景,微软雅黑,40,&H000575E0,&H00614B86,&H000575E0,&H004848C5,0,0,0,0,120,140,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右下灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00B3B3B3,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第二幕 - 右下灰色 - 背景,微软雅黑,40,&H00B3B3B3,&H00614B86,&H00B3B3B3,&H004848C5,0,0,0,0,140,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左上蓝色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00AD7141,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左上蓝色 - Copy,微软雅黑,40,&H00AD7141,&H00614B86,&H00AD7141,&H004848C5,0,0,0,0,150,120,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左中深色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H002D2B2B,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左中深色 - Copy,微软雅黑,40,&H002D2B2B,&H00614B86,&H002D2B2B,&H004848C5,0,0,0,0,100,122,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右上深红,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00000563,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右上深红 - Copy,微软雅黑,40,&H00000563,&H00614B86,&H00000563,&H004848C5,0,0,0,0,105,119,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右下橙色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H001065BC,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右下橙色 - Copy,微软雅黑,40,&H00377DC1,&H00614B86,&H00377DC1,&H004848C5,0,0,0,0,120,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右中灰色,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00273D54,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 右中灰色 - Copy,微软雅黑,40,&H00273D54,&H00614B86,&H00273D54,&H004848C5,0,0,0,0,104,109,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左 - 下,微软雅黑,40,&H00FCFCFC,&H00614B86,&H001F2BA0,&H004848C5,-1,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第三幕 - 左 - 下 - Copy,微软雅黑,40,&H001F2BA0,&H00614B86,&H001F2BA0,&H004848C5,0,0,0,0,112,114,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左 - 上,微软雅黑,40,&H00FCFCFC,&H00614B86,&H00FCCB58,&H004848C5,-1,0,0,0,100,100,1,0,1,0,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左 - 上 - 背景,微软雅黑,75,&H00FCCB58,&H00614B86,&H00FCCB58,&H004848C5,0,0,0,0,100,100,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H002E3E1C,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 中 - 背景,微软雅黑,40,&H002E3E1C,&H00614B86,&H002E3E1C,&H004848C5,-1,0,0,0,120,188,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H009A32EF,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左中 - 背景,微软雅黑,40,&H009A32EF,&H00614B86,&H009A32EF,&H004848C5,-1,0,0,0,120,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左下,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00846D08,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 左下 - 背景,微软雅黑,45,&H00846D08,&H00614B86,&H00846D08,&H004848C5,-1,0,0,0,100,130,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右中,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00067EB6,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右中 - Copy,微软雅黑,80,&H00067EB6,&H00614B86,&H00067EB6,&H004848C5,-1,0,0,0,165,114,1,0,3,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右下,微软雅黑,40,&H00FFFFFF,&H00614B86,&H00965F09,&H004848C5,-1,0,0,0,100,100,1,0,1,3,0,2,3,3,14,1
Style: 片头 - 第四幕 - 右下 - Copy,微软雅黑,80,&H00965F09,&H00614B86,&H00965F09,&H004848C5,-1,0,0,0,195,114,1,0,3,3,0,2,3,3,14,1
Style: 备注 - 中间,微软雅黑,46,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,8,36,23,32,1
Style: 备注 - 主题,微软雅黑,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,2,1,7,36,23,158,1
Style: 这一集的名字,微软雅黑,68,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,36,43,40,1
Style: 翻译人员专属 - 片尾（左上角）,微软雅黑,58,&H008DE3FF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,0,7,42,32,42,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:03.00,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
Dialogue: 0,0:00:00.59,0:00:03.44,en - 白色,,0,0,0,,So we've covered the right half of the puzzle, primitive types.
Dialogue: 0,0:00:00.59,0:00:03.44,zh - 黄色,,0,0,0,,我们已经讨论了谜题的右半部分，基本类型
Dialogue: 0,0:00:03.57,0:00:07.02,en - 白色,,0,0,0,,Now what we're going to do is turn over to the left half of the walrus mystery,
Dialogue: 0,0:00:03.57,0:00:07.02,zh - 黄色,,0,0,0,,现在转到海象之谜的左半部分
Dialogue: 0,0:00:07.11,0:00:10.42,en - 白色,,0,0,0,,how the walrus behaves, by talking about so-called reference types.
Dialogue: 0,0:00:07.11,0:00:10.42,zh - 黄色,,0,0,0,,通过海象的行为谈论所谓的引用类型
Dialogue: 0,0:00:11.07,0:00:15.13,en - 白色,,0,0,0,,So we've said there are eight primitive types in Java, byte, short, int, long, et cetera.
Dialogue: 0,0:00:11.07,0:00:15.13,zh - 黄色,,0,0,0,,之前说过 Java 有8种基本类型 byte、short、int、long 等等
Dialogue: 0,0:00:15.53,0:00:19.80,en - 白色,,0,0,0,,And any other variable you declare, say, a planet or a walrus or an int array,
Dialogue: 0,0:00:15.53,0:00:19.80,zh - 黄色,,0,0,0,,以及你声明的任何其他变量，比方说行星、海象或整型数组
Dialogue: 0,0:00:19.95,0:00:22.17,en - 白色,,0,0,0,,is going to be a so-called reference type.
Dialogue: 0,0:00:19.95,0:00:22.17,zh - 黄色,,0,0,0,,后者是所谓的引用类型
Dialogue: 0,0:00:23.01,0:00:26.00,en - 白色,,0,0,0,,That's just the term for all of the types that are not these.
Dialogue: 0,0:00:23.01,0:00:26.00,zh - 黄色,,0,0,0,,引用类型就是非基本类型的术语
Dialogue: 0,0:00:26.70,0:00:32.37,en - 白色,,0,0,0,,So let's start digging into our understanding of reference types by discussing object instantiations.
Dialogue: 0,0:00:26.70,0:00:32.37,zh - 黄色,,0,0,0,,让我们从对象实例化开始深入理解引用类型
Dialogue: 0,0:00:33.06,0:00:36.28,en - 白色,,0,0,0,,So whenever you say new dog or new walrus or new planet or whatever,
Dialogue: 0,0:00:33.06,0:00:36.28,zh - 黄色,,0,0,0,,每次 new 狗或 new 海象或 new 行星或其他任何东西时
Dialogue: 0,0:00:36.60,0:00:41.73,en - 白色,,0,0,0,,what Java is going to do is it's going to allocate a box of bits for each instance variable of the class--
Dialogue: 0,0:00:36.60,0:00:41.73,zh - 黄色,,0,0,0,,Java 为类的每个实例变量分配一个盒子
Dialogue: 0,0:00:41.73,0:00:42.55,en - 白色,,0,0,0,,here they are, listed--
Dialogue: 0,0:00:41.73,0:00:42.55,zh - 黄色,,0,0,0,,在这里列出了...
Dialogue: 0,0:00:42.96,0:00:45.51,en - 白色,,0,0,0,,and fill them with a default value, say, zero or null.
Dialogue: 0,0:00:42.96,0:00:45.51,zh - 黄色,,0,0,0,,并用缺省值填充它们，比方说0或 null
Dialogue: 0,0:00:45.90,0:00:49.82,en - 白色,,0,0,0,,And then the constructor will then usually fill every box with some other value.
Dialogue: 0,0:00:45.90,0:00:49.82,zh - 黄色,,0,0,0,,然后构造函数通常会用其他值填充每个盒子
Dialogue: 0,0:00:50.06,0:00:51.08,en - 白色,,0,0,0,,It doesn't have to.
Dialogue: 0,0:00:50.06,0:00:51.08,zh - 黄色,,0,0,0,,并不全是这样
Dialogue: 0,0:00:51.45,0:00:52.33,en - 白色,,0,0,0,,But in this case, it will.
Dialogue: 0,0:00:51.45,0:00:52.33,zh - 黄色,,0,0,0,,但这种情况下是这样
Dialogue: 0,0:00:52.56,0:00:53.51,en - 白色,,0,0,0,,So let's see an example.
Dialogue: 0,0:00:52.56,0:00:53.51,zh - 黄色,,0,0,0,,让我们来看一个例子
Dialogue: 0,0:00:55.36,0:00:57.20,en - 白色,,0,0,0,,So when I run this visualizer here,
Dialogue: 0,0:00:55.36,0:00:57.20,zh - 黄色,,0,0,0,,在这里运行 visualizer
Dialogue: 0,0:00:57.90,0:01:01.22,en - 白色,,0,0,0,,I will see that walrus, whenever I run the constructor--
Dialogue: 0,0:00:57.90,0:01:01.22,zh - 黄色,,0,0,0,,每次运行构造函数时，我都会看到那只海象
Dialogue: 0,0:01:02.10,0:01:06.96,en - 白色,,0,0,0,,once I call new, two boxes are created, one for the weight and one for the tusk size.
Dialogue: 0,0:01:02.10,0:01:06.96,zh - 黄色,,0,0,0,,一旦调用 new，就会创建两个盒子，一个用于存储重量，另一个用于存储象牙大小
Dialogue: 0,0:01:06.96,0:01:09.02,en - 白色,,0,0,0,,And they're filled in with a default value of 0.
Dialogue: 0,0:01:06.96,0:01:09.02,zh - 黄色,,0,0,0,,并且缺省值都是0
Dialogue: 0,0:01:10.06,0:01:14.20,en - 白色,,0,0,0,,Now the constructor will come through and reset them to some other value in this case,
Dialogue: 0,0:01:10.06,0:01:14.20,zh - 黄色,,0,0,0,,本例中构造函数将它们重置为其他值
Dialogue: 0,0:01:14.40,0:01:15.95,en - 白色,,0,0,0,,though it doesn't necessarily have to do that.
Dialogue: 0,0:01:14.40,0:01:15.95,zh - 黄色,,0,0,0,,尽管不一定非要这么做
Dialogue: 0,0:01:17.80,0:01:20.59,en - 白色,,0,0,0,,So whenever this code runs, what ends up happening,
Dialogue: 0,0:01:17.80,0:01:20.59,zh - 黄色,,0,0,0,,每次运行这段代码时，最终会发生什么
Dialogue: 0,0:01:20.59,0:01:28.31,en - 白色,,0,0,0,,what the new keyword does for us is it creates two boxes, one of size 32 bits, one of 64 bits, for a total of 96.
Dialogue: 0,0:01:20.59,0:01:28.31,zh - 黄色,,0,0,0,,new 关键字为我们创建两个盒子，一个32位，一个64位，总共96位
Dialogue: 0,0:01:29.01,0:01:31.11,en - 白色,,0,0,0,,So that's what happens when we instantiate an object.
Dialogue: 0,0:01:29.01,0:01:31.11,zh - 黄色,,0,0,0,,这就是实例化一个对象时发生的事情
Dialogue: 0,0:01:32.33,0:01:35.73,en - 白色,,0,0,0,,Now, it's interesting to actually reflect on what happens at the bit level.
Dialogue: 0,0:01:32.33,0:01:35.73,zh - 黄色,,0,0,0,,此时在比特级别上发生的事情很有趣
Dialogue: 0,0:01:35.93,0:01:37.86,en - 白色,,0,0,0,,Now this is a little beyond the scope of the class,
Dialogue: 0,0:01:35.93,0:01:37.86,zh - 黄色,,0,0,0,,这有点超出了这门课的范围
Dialogue: 0,0:01:37.86,0:01:41.91,en - 白色,,0,0,0,,but somehow I find it satisfying to know that this is approximately what's going on under the hood.
Dialogue: 0,0:01:37.86,0:01:41.91,zh - 黄色,,0,0,0,,但我很乐于了解底层正在发生的事情
Dialogue: 0,0:01:42.70,0:01:44.22,en - 白色,,0,0,0,,This is a little bit of a simplification,
Dialogue: 0,0:01:42.70,0:01:44.22,zh - 黄色,,0,0,0,,这有点简化了
Dialogue: 0,0:01:44.64,0:01:49.13,en - 白色,,0,0,0,,but in this case, whenever we call new, what Java will do is it will-- when I say new walrus,
Dialogue: 0,0:01:44.64,0:01:49.13,zh - 黄色,,0,0,0,,每当调用 new 时，Java所做的时...执行 new Walrus() 时
Dialogue: 0,0:01:49.13,0:01:50.94,en - 白色,,0,0,0,,it's going to dig through memory,
Dialogue: 0,0:01:49.13,0:01:50.94,zh - 黄色,,0,0,0,,它会进入内存
Dialogue: 0,0:01:50.94,0:01:55.53,en - 白色,,0,0,0,,and it's going to find 96 bits, because that's how many it needs to store the walrus.
Dialogue: 0,0:01:50.94,0:01:55.53,zh - 黄色,,0,0,0,,找到96个位，因为这是它存储海象所需的区域
Dialogue: 0,0:01:56.19,0:01:57.78,en - 白色,,0,0,0,,And then it's going to fill in those.
Dialogue: 0,0:01:56.19,0:01:57.78,zh - 黄色,,0,0,0,,然后填满这些
Dialogue: 0,0:01:57.78,0:02:03.69,en - 白色,,0,0,0,,The constructor will fill in this top bit with 1,000 and this bottom bit here, the blue bits, with 8.3.
Dialogue: 0,0:01:57.78,0:02:03.69,zh - 黄色,,0,0,0,,构造函数用1000填充这个顶部区域，用8.3填充底部区域，就是蓝色的位
Dialogue: 0,0:02:03.69,0:02:05.22,en - 白色,,0,0,0,,So this happens to be 8.3.
Dialogue: 0,0:02:03.69,0:02:05.22,zh - 黄色,,0,0,0,,这恰好是8.3
Dialogue: 0,0:02:06.39,0:02:10.97,en - 白色,,0,0,0,,And on a more physical level, that's a rough picture of what's going on.
Dialogue: 0,0:02:06.39,0:02:10.97,zh - 黄色,,0,0,0,,这就是物理层面上发生的事情
Dialogue: 0,0:02:11.46,0:02:13.53,en - 白色,,0,0,0,,Now, I'm going to admit this is a bit of a simplification.
Dialogue: 0,0:02:11.46,0:02:13.53,zh - 黄色,,0,0,0,,我得承认这有点简单化了
Dialogue: 0,0:02:14.16,0:02:23.35,en - 白色,,0,0,0,,The actual size of a walrus will be a little bit bigger than 96 bits, because there's various information that's header information or overhead up here,
Dialogue: 0,0:02:14.16,0:02:23.35,zh - 黄色,,0,0,0,,海象实际比96位稍大一点，因为还要有各种信息，比如头部信息
Dialogue: 0,0:02:23.35,0:02:27.68,en - 白色,,0,0,0,,but I'm not showing it here because it's just beyond the scope of our class, and this is good enough for us.
Dialogue: 0,0:02:23.35,0:02:27.68,zh - 黄色,,0,0,0,,但不在这里展示，因为它超出了我们课程的范围，这对我们来说已经足够了
Dialogue: 0,0:02:28.77,0:02:32.71,en - 白色,,0,0,0,,So in other words, what happens is your computer has a few billion bits.
Dialogue: 0,0:02:28.77,0:02:32.71,zh - 黄色,,0,0,0,,换句话说，你的计算机有几十亿位
Dialogue: 0,0:02:32.88,0:02:35.92,en - 白色,,0,0,0,,It looks through those bits, and it somehow decides, yes, this.
Dialogue: 0,0:02:32.88,0:02:35.92,zh - 黄色,,0,0,0,,它浏览那些比特，然后决定存放在这里
Dialogue: 0,0:02:35.92,0:02:38.49,en - 白色,,0,0,0,,This is the place where my walrus is going to live.
Dialogue: 0,0:02:35.92,0:02:38.49,zh - 黄色,,0,0,0,,这就是海象将要生存的地方
Dialogue: 0,0:02:38.49,0:02:39.46,en - 白色,,0,0,0,,Here is the weight.
Dialogue: 0,0:02:38.49,0:02:39.46,zh - 黄色,,0,0,0,,这里是重量
Dialogue: 0,0:02:39.46,0:02:40.51,en - 白色,,0,0,0,,Here is the tusk size.
Dialogue: 0,0:02:39.46,0:02:40.51,zh - 黄色,,0,0,0,,这里是象牙的大小
Dialogue: 0,0:02:41.12,0:02:42.42,en - 白色,,0,0,0,,And there it goes.
Dialogue: 0,0:02:41.12,0:02:42.42,zh - 黄色,,0,0,0,,就是这样
Dialogue: 0,0:02:44.01,0:02:45.57,en - 白色,,0,0,0,,So what's interesting about the new keyword
Dialogue: 0,0:02:44.01,0:02:45.57,zh - 黄色,,0,0,0,,那么 new 关键字哪里有趣呢？
Dialogue: 0,0:02:46.26,0:02:53.11,en - 白色,,0,0,0,,is that we can think of it not only as going out to this massive field of bits and finding a home for the information on the walrus,
Dialogue: 0,0:02:46.26,0:02:53.11,zh - 黄色,,0,0,0,,我们不仅可以想象成从这片巨大的比特领域为海象找到归宿
Dialogue: 0,0:02:53.34,0:02:57.13,en - 白色,,0,0,0,,but we can also think of it as reporting where it put the walrus.
Dialogue: 0,0:02:53.34,0:02:57.13,zh - 黄色,,0,0,0,,还可以把它想象成报告了海象的位置
Dialogue: 0,0:02:57.30,0:02:59.97,en - 白色,,0,0,0,,So if I go to the fields and I bury a treasure,
Dialogue: 0,0:02:57.30,0:02:59.97,zh - 黄色,,0,0,0,,假如我去田里埋藏宝藏
Dialogue: 0,0:02:59.97,0:03:00.85,en - 白色,,0,0,0,,I mean, that's great.
Dialogue: 0,0:02:59.97,0:03:00.85,zh - 黄色,,0,0,0,,那可太棒了
Dialogue: 0,0:03:00.85,0:03:02.28,en - 白色,,0,0,0,,The treasure's in the field now.
Dialogue: 0,0:03:00.85,0:03:02.28,zh - 黄色,,0,0,0,,宝藏现在在田里了
Dialogue: 0,0:03:02.28,0:03:07.02,en - 白色,,0,0,0,,But if I ever want to see that treasure again or let someone know where it is, I have to report that information,
Dialogue: 0,0:03:02.28,0:03:07.02,zh - 黄色,,0,0,0,,但是如果我再想看到宝藏，或者让别人知道它在哪里，就必须报告这些信息
Dialogue: 0,0:03:07.02,0:03:08.89,en - 白色,,0,0,0,,that out there in the corner of the field,
Dialogue: 0,0:03:07.02,0:03:08.89,zh - 黄色,,0,0,0,,在田野的角落里
Dialogue: 0,0:03:08.89,0:03:10.00,en - 白色,,0,0,0,,that's where the treasure is.
Dialogue: 0,0:03:08.89,0:03:10.00,zh - 黄色,,0,0,0,,宝藏就在那里
Dialogue: 0,0:03:10.68,0:03:12.59,en - 白色,,0,0,0,,So what'll happen is that the new keyword,
Dialogue: 0,0:03:10.68,0:03:12.59,zh - 黄色,,0,0,0,,接下来，new 关键字
Dialogue: 0,0:03:12.59,0:03:19.24,en - 白色,,0,0,0,,you could think of it as returning the value, or the number of bit in memory,
Dialogue: 0,0:03:12.59,0:03:19.24,zh - 黄色,,0,0,0,,可以视为返回一个，值或内存中的位数
Dialogue: 0,0:03:19.53,0:03:21.24,en - 白色,,0,0,0,,where it put the walrus.
Dialogue: 0,0:03:19.53,0:03:21.24,zh - 黄色,,0,0,0,,海象存放的位置
Dialogue: 0,0:03:21.74,0:03:22.62,en - 白色,,0,0,0,,So it's very natural.
Dialogue: 0,0:03:21.74,0:03:22.62,zh - 黄色,,0,0,0,,这顺其自然
Dialogue: 0,0:03:22.62,0:03:25.98,en - 白色,,0,0,0,,It's a sequence of bits that what new can just do is return,
Dialogue: 0,0:03:22.62,0:03:25.98,zh - 黄色,,0,0,0,,这是一个比特序列，new 可以返回地址
Dialogue: 0,0:03:25.98,0:03:28.41,en - 白色,,0,0,0,,OK, hey, you know where I put that wonderful walrus?
Dialogue: 0,0:03:25.98,0:03:28.41,zh - 黄色,,0,0,0,,“嘿，你知道我把海象放哪儿了吗？”
Dialogue: 0,0:03:28.41,0:03:33.64,en - 白色,,0,0,0,,I put it in bit number 2,384,723,423.
Dialogue: 0,0:03:28.41,0:03:33.64,zh - 黄色,,0,0,0,,“我把它放在2,384,723,423位”
Dialogue: 0,0:03:34.50,0:03:39.84,en - 白色,,0,0,0,,And that will be the so-called-- you can think of that as the return value of the new keyword.
Dialogue: 0,0:03:34.50,0:03:39.84,zh - 黄色,,0,0,0,,这就是所谓的...你可以理解为 new 关键字的返回值
Dialogue: 0,0:03:40.66,0:03:42.26,en - 白色,,0,0,0,,So it goes out there, it buries the treasure,
Dialogue: 0,0:03:40.66,0:03:42.26,zh - 黄色,,0,0,0,,它表明这里埋藏了宝藏
Dialogue: 0,0:03:42.26,0:03:47.33,en - 白色,,0,0,0,,then it shouts to the heavens, this is where I've put this treasure, this wonderful walrus.
Dialogue: 0,0:03:42.26,0:03:47.33,zh - 黄色,,0,0,0,,“这就是我埋藏宝藏的地方，一只奇妙的海象”
Dialogue: 0,0:03:48.99,0:03:50.02,en - 白色,,0,0,0,,So what?
Dialogue: 0,0:03:48.99,0:03:50.02,zh - 黄色,,0,0,0,,怎么样？
Dialogue: 0,0:03:50.02,0:03:54.75,en - 白色,,0,0,0,,Well, let's talk a little bit about the declaration of a variable that's a reference type.
Dialogue: 0,0:03:50.02,0:03:54.75,zh - 黄色,,0,0,0,,让我们来讨论一下引用类型变量的声明
Dialogue: 0,0:03:54.75,0:03:57.05,en - 白色,,0,0,0,,So before we've been talking about instantiation,
Dialogue: 0,0:03:54.75,0:03:57.05,zh - 黄色,,0,0,0,,在讨论实例化之前
Dialogue: 0,0:03:57.05,0:03:59.40,en - 白色,,0,0,0,,how new works, now let's talk about declaration.
Dialogue: 0,0:03:57.05,0:03:59.40,zh - 黄色,,0,0,0,,讨论 new 是如何工作的
Dialogue: 0,0:04:00.30,0:04:04.37,en - 白色,,0,0,0,,So if I have a piece of code that declares that a walrus exists or that a dog exists
Dialogue: 0,0:04:00.30,0:04:04.37,zh - 黄色,,0,0,0,,如果我有一段代码声明海象或狗的存在
Dialogue: 0,0:04:04.37,0:04:09.78,en - 白色,,0,0,0,,or that a planet exists, what Java will do is it will allocate a box of exactly 64 bits,
Dialogue: 0,0:04:04.37,0:04:09.78,zh - 黄色,,0,0,0,,或者行星存在，Java 会分配一个恰好64位的盒子
Dialogue: 0,0:04:09.78,0:04:11.20,en - 白色,,0,0,0,,no matter what type of object.
Dialogue: 0,0:04:09.78,0:04:11.20,zh - 黄色,,0,0,0,,不管是什么类型的对象
Dialogue: 0,0:04:11.65,0:04:12.57,en - 白色,,0,0,0,,It's a reference type.
Dialogue: 0,0:04:11.65,0:04:12.57,zh - 黄色,,0,0,0,,它是一个引用类型
Dialogue: 0,0:04:12.57,0:04:13.66,en - 白色,,0,0,0,,That's just what's going to happen.
Dialogue: 0,0:04:12.57,0:04:13.66,zh - 黄色,,0,0,0,,这就是发生的事情
Dialogue: 0,0:04:14.31,0:04:17.95,en - 白色,,0,0,0,,And then these bits can either be set to null, that is, all zeros,
Dialogue: 0,0:04:14.31,0:04:17.95,zh - 黄色,,0,0,0,,然后这些位设置为null，即全0
Dialogue: 0,0:04:18.22,0:04:22.24,en - 白色,,0,0,0,,or it scould be set to the address of a specific instance of that class as returned by new.
Dialogue: 0,0:04:18.22,0:04:22.24,zh - 黄色,,0,0,0,,或者它可以设置为由 new 返回的特定实例的地址
Dialogue: 0,0:04:22.77,0:04:24.06,en - 白色,,0,0,0,,So let's see this very simple example.
Dialogue: 0,0:04:22.77,0:04:24.06,zh - 黄色,,0,0,0,,看一个简单的例子
Dialogue: 0,0:04:24.82,0:04:29.07,en - 白色,,0,0,0,,If I say walrus, some walrus, and then say some walrus equals null, well,
Dialogue: 0,0:04:24.82,0:04:29.07,zh - 黄色,,0,0,0,,Walrus somWalrus， 然后是 someWalrus = null
Dialogue: 0,0:04:29.07,0:04:31.97,en - 白色,,0,0,0,,that first line, what it does is creates a box of 64 bits.
Dialogue: 0,0:04:29.07,0:04:31.97,zh - 黄色,,0,0,0,,第一行创建一个64位的盒子
Dialogue: 0,0:04:32.22,0:04:34.11,en - 白色,,0,0,0,,And the second line, equals null,
Dialogue: 0,0:04:32.22,0:04:34.11,zh - 黄色,,0,0,0,,第二行
Dialogue: 0,0:04:34.11,0:04:36.48,en - 白色,,0,0,0,,sets it all equal to zero as a marker to say,
Dialogue: 0,0:04:34.11,0:04:36.48,zh - 黄色,,0,0,0,,将其全部设置为0作为标记
Dialogue: 0,0:04:36.48,0:04:39.44,en - 白色,,0,0,0,,well, it's nothing. It's null.
Dialogue: 0,0:04:36.48,0:04:39.44,zh - 黄色,,0,0,0,,意味着它是空的
Dialogue: 0,0:04:40.62,0:04:43.32,en - 白色,,0,0,0,,By contrast, if I say walrus, some walrus--
Dialogue: 0,0:04:40.62,0:04:43.32,zh - 黄色,,0,0,0,,相比之下，Walrus someWalrus
Dialogue: 0,0:04:43.32,0:04:45.27,en - 白色,,0,0,0,,that creates a box of 64 bits--
Dialogue: 0,0:04:43.32,0:04:45.27,zh - 黄色,,0,0,0,,产生了一个64位的盒子
Dialogue: 0,0:04:45.27,0:04:49.56,en - 白色,,0,0,0,,and then say equals new walrus, then what's going to happen is that after new, goes out to the field,
Dialogue: 0,0:04:45.27,0:04:49.56,zh - 黄色,,0,0,0,,然后 new Walrus()，它走到田野里
Dialogue: 0,0:04:49.56,0:04:51.97,en - 白色,,0,0,0,,and it digs the hole and puts the delicious,
Dialogue: 0,0:04:49.56,0:04:51.97,zh - 黄色,,0,0,0,,挖了个洞，把美味的...
Dialogue: 0,0:04:52.32,0:04:54.28,en - 白色,,0,0,0,,delicious walrus-- that's not nice--
Dialogue: 0,0:04:52.32,0:04:54.28,zh - 黄色,,0,0,0,,美味的海象...不太合适...
Dialogue: 0,0:04:54.81,0:05:00.68,en - 白色,,0,0,0,,our lovely walrus in the field and then shouts, here's the location of the walrus.
Dialogue: 0,0:04:54.81,0:05:00.68,zh - 黄色,,0,0,0,,把可爱的海象放在田野里，然后喊道：“这就是海象的位置”
Dialogue: 0,0:05:01.07,0:05:03.22,en - 白色,,0,0,0,,This serves as a record of that information.
Dialogue: 0,0:05:01.07,0:05:03.22,zh - 黄色,,0,0,0,,这就是该信息的记录
Dialogue: 0,0:05:03.75,0:05:07.71,en - 白色,,0,0,0,,So if it got put in location 0100011 yada yada,
Dialogue: 0,0:05:03.75,0:05:07.71,zh - 黄色,,0,0,0,,假如它被放在0100011号
Dialogue: 0,0:05:08.33,0:05:11.02,en - 白色,,0,0,0,,that is going to be what we store in this box.
Dialogue: 0,0:05:08.33,0:05:11.02,zh - 黄色,,0,0,0,,这就是储存在盒子里的东西
Dialogue: 0,0:05:11.64,0:05:14.02,en - 白色,,0,0,0,,So even though the walrus itself is 96 bits,
Dialogue: 0,0:05:11.64,0:05:14.02,zh - 黄色,,0,0,0,,所以即使海象本身有96位
Dialogue: 0,0:05:14.30,0:05:16.51,en - 白色,,0,0,0,,the address that we store is 64 bits.
Dialogue: 0,0:05:14.30,0:05:16.51,zh - 黄色,,0,0,0,,但我们存储的地址是64位
Dialogue: 0,0:05:16.94,0:05:21.62,en - 白色,,0,0,0,,And it's just in a modern Java Runtime Environment,
Dialogue: 0,0:05:16.94,0:05:21.62,zh - 黄色,,0,0,0,,在现代 Java 运行时环境中
Dialogue: 0,0:05:21.62,0:05:23.75,en - 白色,,0,0,0,,64 bits is the size of the address.
Dialogue: 0,0:05:21.62,0:05:23.75,zh - 黄色,,0,0,0,,64位是地址的大小
Dialogue: 0,0:05:23.75,0:05:26.75,en - 白色,,0,0,0,,That's how many bits we use to represent this number right here.
Dialogue: 0,0:05:23.75,0:05:26.75,zh - 黄色,,0,0,0,,也就是用来表示这个数字的位数
Dialogue: 0,0:05:29.38,0:05:35.31,en - 白色,,0,0,0,,So while this notation does give us a fairly accurate picture of what's going on--
Dialogue: 0,0:05:29.38,0:05:35.31,zh - 黄色,,0,0,0,,虽然这个符号准确地告诉我们发生的事情
Dialogue: 0,0:05:35.31,0:05:40.91,en - 白色,,0,0,0,,and again, I kind of fudged things a little bit, and when you go to 61C or even an operating systems class,
Dialogue: 0,0:05:35.31,0:05:40.91,zh - 黄色,,0,0,0,,再说一次我有点胡编乱造，当你去上 61C 甚至是操作系统课程时
Dialogue: 0,0:05:40.91,0:05:44.10,en - 白色,,0,0,0,,you'll get a really more honest understanding.
Dialogue: 0,0:05:40.91,0:05:44.10,zh - 黄色,,0,0,0,,你会得到更准确的理解
Dialogue: 0,0:05:44.10,0:05:46.24,en - 白色,,0,0,0,,While this is good enough for our purpose in 61B,
Dialogue: 0,0:05:44.10,0:05:46.24,zh - 黄色,,0,0,0,,虽然这对 61B 来说已经足够了
Dialogue: 0,0:05:46.68,0:05:50.84,en - 白色,,0,0,0,,it's not particularly instructive to look at this giant stream of bits and expect to know anything.
Dialogue: 0,0:05:46.68,0:05:50.84,zh - 黄色,,0,0,0,,这个冗长的比特流难以阅读
Dialogue: 0,0:05:51.66,0:05:53.62,en - 白色,,0,0,0,,So what I'm going to do is similar to before.
Dialogue: 0,0:05:51.66,0:05:53.62,zh - 黄色,,0,0,0,,所以和以前一样
Dialogue: 0,0:05:53.96,0:05:58.28,en - 白色,,0,0,0,,We're not going to show explicitly the binary information shown in a memory box.
Dialogue: 0,0:05:53.96,0:05:58.28,zh - 黄色,,0,0,0,,我们不会显式地写出内存盒子中的二进制信息
Dialogue: 0,0:05:58.53,0:06:01.64,en - 白色,,0,0,0,,We're going to instead use this simplified box notation.
Dialogue: 0,0:05:58.53,0:06:01.64,zh - 黄色,,0,0,0,,我们将改用简化盒子表示法
Dialogue: 0,0:06:02.28,0:06:06.15,en - 白色,,0,0,0,,And in this case, whenever we're talking about reference types,
Dialogue: 0,0:06:02.28,0:06:06.15,zh - 黄色,,0,0,0,,这种情况下，谈论引用类型时
Dialogue: 0,0:06:06.62,0:06:09.39,en - 白色,,0,0,0,,this notation will often be called box and pointer.
Dialogue: 0,0:06:06.62,0:06:09.39,zh - 黄色,,0,0,0,,此符号通常记为盒子和指针
Dialogue: 0,0:06:09.39,0:06:10.28,en - 白色,,0,0,0,,OK, so what is it?
Dialogue: 0,0:06:09.39,0:06:10.28,zh - 黄色,,0,0,0,,这是什么呢？
Dialogue: 0,0:06:11.07,0:06:13.04,en - 白色,,0,0,0,,So whenever we have a null, a bunch of zeros,
Dialogue: 0,0:06:11.07,0:06:13.04,zh - 黄色,,0,0,0,,每当我们有 null，也就是一堆0
Dialogue: 0,0:06:13.04,0:06:14.79,en - 白色,,0,0,0,,we're just going to write null in the box,
Dialogue: 0,0:06:13.04,0:06:14.79,zh - 黄色,,0,0,0,,只需在盒子中写 null
Dialogue: 0,0:06:14.79,0:06:17.95,en - 白色,,0,0,0,,because having 64 zeros in a row is just a waste of space.
Dialogue: 0,0:06:14.79,0:06:17.95,zh - 黄色,,0,0,0,,因为写连续64个0只是浪费空间
Dialogue: 0,0:06:19.17,0:06:21.87,en - 白色,,0,0,0,,And if we ever have a non-zero address, that is-- sorry--
Dialogue: 0,0:06:19.17,0:06:21.87,zh - 黄色,,0,0,0,,如果我们有一个非0的地址
Dialogue: 0,0:06:21.87,0:06:24.64,en - 白色,,0,0,0,,that is, if this address is anything other than zeros,
Dialogue: 0,0:06:21.87,0:06:24.64,zh - 黄色,,0,0,0,,也就是说如果地址不是0
Dialogue: 0,0:06:24.90,0:06:29.73,en - 白色,,0,0,0,,then we're going to draw an arrow to whichever object the walrus is pointing at.
Dialogue: 0,0:06:24.90,0:06:29.73,zh - 黄色,,0,0,0,,我们就要向海象所指的对象画一个箭头
Dialogue: 0,0:06:30.16,0:06:32.42,en - 白色,,0,0,0,,So instead of showing this right here,
Dialogue: 0,0:06:30.16,0:06:32.42,zh - 黄色,,0,0,0,,所以与其展示这个
Dialogue: 0,0:06:33.15,0:06:39.00,en - 白色,,0,0,0,,this sequence of seemingly random 64 bits, we'll draw an address that shows us which walrus we're talking about.
Dialogue: 0,0:06:33.15,0:06:39.00,zh - 黄色,,0,0,0,,这个看似随机的64位序列，我们将绘制一个地址，表明正在谈论的是哪只海象
Dialogue: 0,0:06:39.33,0:06:40.75,en - 白色,,0,0,0,,So here is our 96-bit walrus.
Dialogue: 0,0:06:39.33,0:06:40.75,zh - 黄色,,0,0,0,,这就是96位对应的海象
Dialogue: 0,0:06:40.95,0:06:43.15,en - 白色,,0,0,0,,Here's our 64-bit box holding the address.
Dialogue: 0,0:06:40.95,0:06:43.15,zh - 黄色,,0,0,0,,这是我们存放地址的64位盒子
Dialogue: 0,0:06:43.41,0:06:46.97,en - 白色,,0,0,0,,And there's a pointer, hence the name box and pointer notation.
Dialogue: 0,0:06:43.41,0:06:46.97,zh - 黄色,,0,0,0,,这里有一个指针，因此有了名字盒子和指针符号
Dialogue: 0,0:06:48.66,0:06:52.97,en - 白色,,0,0,0,,You may not realize it, but you now know everything you need to solve the mystery of the walrus.
Dialogue: 0,0:06:48.66,0:06:52.97,zh - 黄色,,0,0,0,,你可能没意识到，你现在知道了解开海象之谜所需的一切
Dialogue: 0,0:06:54.27,0:06:57.99,en - 白色,,0,0,0,,So I mentioned the golden rule of equals, that equals just copies the bits.
Dialogue: 0,0:06:54.27,0:06:57.99,zh - 黄色,,0,0,0,,我提到的等号的黄金法则，即等号只是复制比特
Dialogue: 0,0:06:57.99,0:06:58.93,en - 白色,,0,0,0,,That's all it does.
Dialogue: 0,0:06:57.99,0:06:58.93,zh - 黄色,,0,0,0,,仅此而已
Dialogue: 0,0:06:59.15,0:07:00.48,en - 白色,,0,0,0,,Now, that's true for primitive types,
Dialogue: 0,0:06:59.15,0:07:00.48,zh - 黄色,,0,0,0,,这对于基本类型是正确的
Dialogue: 0,0:07:00.48,0:07:03.10,en - 白色,,0,0,0,,but it actually is also true for reference types and in fact,
Dialogue: 0,0:07:00.48,0:07:03.10,zh - 黄色,,0,0,0,,对于引用类型也是如此
Dialogue: 0,0:07:03.10,0:07:05.57,en - 白色,,0,0,0,,for any situation in Java where you say equals.
Dialogue: 0,0:07:03.10,0:07:05.57,zh - 黄色,,0,0,0,,实际上对于 Java 中任何情况都一样
Dialogue: 0,0:07:06.01,0:07:07.47,en - 白色,,0,0,0,,So in terms of our visual metaphor,
Dialogue: 0,0:07:06.01,0:07:07.47,zh - 黄色,,0,0,0,,就视觉而言
Dialogue: 0,0:07:07.47,0:07:10.40,en - 白色,,0,0,0,,what that means is we're going to copy the arrow by making--
Dialogue: 0,0:07:07.47,0:07:10.40,zh - 黄色,,0,0,0,,这意味着我们要复制箭头...
Dialogue: 0,0:07:10.40,0:07:12.28,en - 白色,,0,0,0,,if we say, for example, b equals a,
Dialogue: 0,0:07:10.40,0:07:12.28,zh - 黄色,,0,0,0,,比如说 b = a
Dialogue: 0,0:07:12.28,0:07:15.51,en - 白色,,0,0,0,,we're going to make the arrow in the b box point at the same instance as a.
Dialogue: 0,0:07:12.28,0:07:15.51,zh - 黄色,,0,0,0,,b 盒子中的箭头应指向与 a 相同的实例
Dialogue: 0,0:07:16.00,0:07:18.08,en - 白色,,0,0,0,,So let's see that in terms of box and pointer notation.
Dialogue: 0,0:07:16.00,0:07:18.08,zh - 黄色,,0,0,0,,我们从盒子和指针符号的角度看这点
Dialogue: 0,0:07:19.15,0:07:21.04,en - 白色,,0,0,0,,So when I say walrus a, what does that do?
Dialogue: 0,0:07:19.15,0:07:21.04,zh - 黄色,,0,0,0,,Walrus a 是什么意思呢？
Dialogue: 0,0:07:21.61,0:07:23.49,en - 白色,,0,0,0,,Well, that creates a box of 64 bits.
Dialogue: 0,0:07:21.61,0:07:23.49,zh - 黄色,,0,0,0,,产生了一个64位的盒子
Dialogue: 0,0:07:23.49,0:07:24.15,en - 白色,,0,0,0,,There it is.
Dialogue: 0,0:07:23.49,0:07:24.15,zh - 黄色,,0,0,0,,就是这个
Dialogue: 0,0:07:24.15,0:07:25.59,en - 白色,,0,0,0,,And I've only shown it very small.
Dialogue: 0,0:07:24.15,0:07:25.59,zh - 黄色,,0,0,0,,我只展示了小部分
Dialogue: 0,0:07:25.59,0:07:28.26,en - 白色,,0,0,0,,I mean, I could make huge box, but we know it's 64 bits,
Dialogue: 0,0:07:25.59,0:07:28.26,zh - 黄色,,0,0,0,,也就是说我可以做个大盒子，但知道它是64位了
Dialogue: 0,0:07:28.26,0:07:29.44,en - 白色,,0,0,0,,because look, it says so right there.
Dialogue: 0,0:07:28.26,0:07:29.44,zh - 黄色,,0,0,0,,就可以这么写
Dialogue: 0,0:07:30.60,0:07:33.06,en - 白色,,0,0,0,,Now when I say a equals new walrus,
Dialogue: 0,0:07:30.60,0:07:33.06,zh - 黄色,,0,0,0,,执行 a = new Walrus() 时
Dialogue: 0,0:07:33.06,0:07:38.93,en - 白色,,0,0,0,,the new keyword goes out to memory, finds the bits it needs, the 96 bits, and it shouts the location,
Dialogue: 0,0:07:33.06,0:07:38.93,zh - 黄色,,0,0,0,,new 关键字进入内存，找到它需要的96位，并报告位置
Dialogue: 0,0:07:39.69,0:07:41.44,en - 白色,,0,0,0,,which a will dutifully record.
Dialogue: 0,0:07:39.69,0:07:41.44,zh - 黄色,,0,0,0,,a 负责记录地址
Dialogue: 0,0:07:42.07,0:07:43.68,en - 白色,,0,0,0,,So this walrus is 96 bits.
Dialogue: 0,0:07:42.07,0:07:43.68,zh - 黄色,,0,0,0,,所以这只海象96位
Dialogue: 0,0:07:43.68,0:07:45.33,en - 白色,,0,0,0,,The new keyword yells the address.
Dialogue: 0,0:07:43.68,0:07:45.33,zh - 黄色,,0,0,0,,new 关键字报告地址
Dialogue: 0,0:07:45.33,0:07:46.90,en - 白色,,0,0,0,,We store the address here.
Dialogue: 0,0:07:45.33,0:07:46.90,zh - 黄色,,0,0,0,,我们把地址存储在这里
Dialogue: 0,0:07:46.90,0:07:49.35,en - 白色,,0,0,0,,And rather than writing out that 64-bit address,
Dialogue: 0,0:07:46.90,0:07:49.35,zh - 黄色,,0,0,0,,而不是写出地址
Dialogue: 0,0:07:49.35,0:07:51.86,en - 白色,,0,0,0,,we draw an arrow, because that's easier to understand.
Dialogue: 0,0:07:49.35,0:07:51.86,zh - 黄色,,0,0,0,,我们画一个箭头，因为这样更容易理解
Dialogue: 0,0:07:53.10,0:07:55.06,en - 白色,,0,0,0,,Next, up we say walrus b.
Dialogue: 0,0:07:53.10,0:07:55.06,zh - 黄色,,0,0,0,,接下来执行 Walrus b
Dialogue: 0,0:07:55.83,0:07:58.38,en - 白色,,0,0,0,,This creates a box, which is 64 bits.
Dialogue: 0,0:07:55.83,0:07:58.38,zh - 黄色,,0,0,0,,这将创建一个64位的盒子
Dialogue: 0,0:07:58.38,0:08:00.44,en - 白色,,0,0,0,,So both a and b are 64 bits.
Dialogue: 0,0:07:58.38,0:08:00.44,zh - 黄色,,0,0,0,,a 和 b 都是64位
Dialogue: 0,0:08:00.75,0:08:03.84,en - 白色,,0,0,0,,And at this point, b is not defined, right?
Dialogue: 0,0:08:00.75,0:08:03.84,zh - 黄色,,0,0,0,,这时 b 还有没定义对吗？
Dialogue: 0,0:08:03.84,0:08:05.33,en - 白色,,0,0,0,,It's not that it's null.
Dialogue: 0,0:08:03.84,0:08:05.33,zh - 黄色,,0,0,0,,它不是 null
Dialogue: 0,0:08:05.33,0:08:06.54,en - 白色,,0,0,0,,Right now, it's just nothing.
Dialogue: 0,0:08:05.33,0:08:06.54,zh - 黄色,,0,0,0,,只是什么都没有
Dialogue: 0,0:08:06.54,0:08:08.76,en - 白色,,0,0,0,,It's just some box of 64 bits.
Dialogue: 0,0:08:06.54,0:08:08.76,zh - 黄色,,0,0,0,,它只是一个64位的盒子
Dialogue: 0,0:08:08.76,0:08:09.57,en - 白色,,0,0,0,,Who knows what's in there?
Dialogue: 0,0:08:08.76,0:08:09.57,zh - 黄色,,0,0,0,,谁知道里面是什么呢？
Dialogue: 0,0:08:10.14,0:08:13.33,en - 白色,,0,0,0,,And when we say b equals a, we're going to copy that string of bits.
Dialogue: 0,0:08:10.14,0:08:13.33,zh - 黄色,,0,0,0,,当执行 b = a 时，就要复制那串比特
Dialogue: 0,0:08:13.33,0:08:14.76,en - 白色,,0,0,0,,Remember, there's 64 bits here.
Dialogue: 0,0:08:13.33,0:08:14.76,zh - 黄色,,0,0,0,,记住，这里有64位
Dialogue: 0,0:08:14.76,0:08:17.43,en - 白色,,0,0,0,,If we had the bit picture, it'd just be a string of 64 bits.
Dialogue: 0,0:08:14.76,0:08:17.43,zh - 黄色,,0,0,0,,如果我们有位的图形，它就只是一个64位的字符串
Dialogue: 0,0:08:17.43,0:08:18.95,en - 白色,,0,0,0,,We'll copy them into this box.
Dialogue: 0,0:08:17.43,0:08:18.95,zh - 黄色,,0,0,0,,把它复制到这个盒子里
Dialogue: 0,0:08:19.39,0:08:21.42,en - 白色,,0,0,0,,And so at that point, when we say b equals a,
Dialogue: 0,0:08:19.39,0:08:21.42,zh - 黄色,,0,0,0,,所以此时，b = a 时
Dialogue: 0,0:08:21.42,0:08:23.44,en - 白色,,0,0,0,,b is pointing at the same object.
Dialogue: 0,0:08:21.42,0:08:23.44,zh - 黄色,,0,0,0,,b 指向同一个对象
Dialogue: 0,0:08:24.19,0:08:26.73,en - 白色,,0,0,0,,So now, if we are to try and do something like b.weight,
Dialogue: 0,0:08:24.19,0:08:26.73,zh - 黄色,,0,0,0,,现在如果我们尝试做一些像 b.weight 这样的事情
Dialogue: 0,0:08:27.10,0:08:28.71,en - 白色,,0,0,0,,it's saying, follow the arrow.
Dialogue: 0,0:08:27.10,0:08:28.71,zh - 黄色,,0,0,0,,它会说：“跟着箭头走”
Dialogue: 0,0:08:28.71,0:08:29.97,en - 白色,,0,0,0,,Go to the walrus.
Dialogue: 0,0:08:28.71,0:08:29.97,zh - 黄色,,0,0,0,,“去海象那儿”
Dialogue: 0,0:08:29.97,0:08:31.66,en - 白色,,0,0,0,,You will find the information you seek.
Dialogue: 0,0:08:29.97,0:08:31.66,zh - 黄色,,0,0,0,,“你会找到你要找的信息”
Dialogue: 0,0:08:32.03,0:08:34.28,en - 白色,,0,0,0,,And in that case, you might say, b.weight equals something.
Dialogue: 0,0:08:32.03,0:08:34.28,zh - 黄色,,0,0,0,,在这种情况下，你可能会让 b.weight 等于某个值
Dialogue: 0,0:08:34.97,0:08:39.08,en - 白色,,0,0,0,,So I hope now it's clear why the mystery of the walrus is resolved the way it does.
Dialogue: 0,0:08:34.97,0:08:39.08,zh - 黄色,,0,0,0,,希望你清楚为什么海象之谜这样解开
Dialogue: 0,0:08:39.60,0:08:44.00,en - 白色,,0,0,0,,And that's all you need to know to understand the whole deal.
Dialogue: 0,0:08:39.60,0:08:44.00,zh - 黄色,,0,0,0,,以上就是你需要理解的所有东西
Dialogue: 0,0:08:41.00,0:08:44.00,翻译人员专属 - 片尾（左上角）,,0,0,0,,翻译：@隐秀_（seriouszyx）
